[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nadifa Hossain",
    "section": "",
    "text": "About Me:\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "hw1_questions.html",
    "href": "hw1_questions.html",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nto do: expand on the description of the experiment.\nThis project seeks to replicate their results."
  },
  {
    "objectID": "hw1_questions.html#introduction",
    "href": "hw1_questions.html#introduction",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nto do: expand on the description of the experiment.\nThis project seeks to replicate their results."
  },
  {
    "objectID": "hw1_questions.html#data",
    "href": "hw1_questions.html#data",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Data",
    "text": "Data\n\nDescription\ntodo: Read the data into R/Python and describe the data\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\n\n\nBalance Test\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\ntodo: test a few variables other than the key outcome variables (for example, test months since last donation) to see if the treatment and control groups are statistically significantly different at the 95% confidence level. Do each as a t-test and separately as a linear regression, and confirm you get the exact same results from both methods. When doing a t-test, use the formula in the class slides. When doing the linear regression, regress for example mrm2 on treatment and look at the estimated coefficient on the treatment variable. It might be helpful to compare parts of your analysis to Table 1 in the paper. Be sure to comment on your results (hint: why is Table 1 included in the paper)."
  },
  {
    "objectID": "hw1_questions.html#experimental-results",
    "href": "hw1_questions.html#experimental-results",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\nCharitable Contribution Made\nFirst, I analyze whether matched donations lead to an increased response rate of making a donation.\ntodo: make a barplot with two bars. Each bar is the proportion of people who donated. One bar for treatment and one bar for control.\ntodo: run a t-test between the treatment and control groups on the binary outcome of whether any charitable donation was made. Also run a bivariate linear regression that demonstrates the same finding. (It may help to confirm your calculations match Table 2a Panel A.) Report your statistical results and interpret them in the context of the experiment (e.g., if you found a difference with a small p-value or that was statistically significant at some threshold, what have you learned about human behavior? Use mostly English words, not numbers or stats, to explain your finding.)\ntodo: run a probit regression where the outcome variable is whether any charitable donation was made and the explanatory variable is assignment to treatment or control. Confirm that your results replicate Table 3 column 1 in the paper.\n\n\nDifferences between Match Rates\nNext, I assess the effectiveness of different sizes of matched donations on the response rate.\ntodo: Use a series of t-tests to test whether the size of the match ratio has an effect on whether people donate or not. For example, does the 2:1 match rate lead increase the likelihood that someone donates as compared to the 1:1 match rate? Do your results support the “figures suggest” comment the authors make on page 8?\ntodo: Assess the same issue using a regression. Specifically, create the variable ratio1 then regress gave on ratio1, ratio2, and ratio3 (or alternatively, regress gave on the categorical variable ratio). Interpret the coefficients and their statistical precision.\ntodo: Calculate the response rate difference between the 1:1 and 2:1 match ratios and the 2:1 and 3:1 ratios. Do this directly from the data, and do it by computing the differences in the fitted coefficients of the previous regression. what do you conclude regarding the effectiveness of different sizes of matched donations?\n\n\nSize of Charitable Contribution\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\ntodo: Calculate a t-test or run a bivariate linear regression of the donation amount on the treatment status. What do we learn from doing this analysis?\ntodo: now limit the data to just people who made a donation and repeat the previous analysis. This regression allows you to analyze how much respondents donate conditional on donating some positive amount. Interpret the regression coefficients – what did we learn? Does the treatment coefficient have a causal interpretation?\ntodo: Make two plot: one for the treatment group and one for the control. Each plot should be a histogram of the donation amounts only among people who donated. Add a red vertical bar or some other annotation to indicate the sample average for each plot."
  },
  {
    "objectID": "hw1_questions.html#simulation-experiment",
    "href": "hw1_questions.html#simulation-experiment",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulation Experiment",
    "text": "Simulation Experiment\nAs a reminder of how the t-statistic “works,” in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\nSuppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made.\nFurther suppose that the true distribution of respondents who do get a charitable donation match of any size is Bernoulli with probability p=0.022 that a donation is made.\n\nLaw of Large Numbers\nto do: Make a plot like those on slide 43 from our first class and explain the plot to the reader. To do this, you will simulate 100,00 draws from the control distribution and 10,000 draws from the treatment distribution. You’ll then calculate a vector of 10,000 differences, and then you’ll plot the cumulative average of that vector of differences. Comment on whether the cumulative average approaches the true difference in means.\n\n\nCentral Limit Theorem\nto do: Make 4 histograms like those on slide 44 from our first class at sample sizes 50, 200, 500, and 1000 and explain these plots to the reader. To do this for a sample size of e.g. 50, take 50 draws from each of the control and treatment distributions, and calculate the average difference between those draws. Then repeat that process 999 more times so that you have 1000 averages. Plot the histogram of those averages. Comment on whether zero is in the “middle” of the distribution or whether it’s in the “tail.”"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Projects",
    "section": "",
    "text": "Karlan & List 2007 Data Description\n\n\n\n\nNadifa Hossain\nMay 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nPoisson Regression Examples\n\n\n\n\nNadifa Hossain\nMay 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/HW1/hw1_questions.html",
    "href": "projects/HW1/hw1_questions.html",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nTo explore how different “price” signals affect charitable giving, Dean Karlan and John List conducted a large-scale natural field experiment involving over 50,000 prior donors to a U.S.-based liberal nonprofit. The experiment aimed to test whether and how matching grant offers—a common fundraising tactic—alter donor behavior.\nParticipants were randomly assigned to receive one of several different types of fundraising letters. The control group received a standard letter without any mention of a matching grant. The treatment group received a letter with an announcement that a “concerned fellow member” would match their donation. Within the treatment group, further randomization varied three key features:\nMatching ratio: The letters promised either a $1:$1, $2:$1, or $3:$1 match.\nMaximum match amount: The match was capped at either $25,000, $50,000, $100,000, or left unstated.\nSuggested donation amounts: Each participant saw one of three ask amounts—equal to, 1.25×, or 1.5× their highest previous donation.\nThis design allowed the researchers to test both main effects and interaction effects of price (via match ratio), perceived value (via cap), and anchoring (via ask amounts).\nKey Findings:\n\nThe presence of a matching grant increased both the response rate (probability of donating) and the average donation.\nMerely including a match offer increased revenue per solicitation by 19% and the response rate by 22%.\nSurprisingly, higher match ratios ($2:$1 or $3:$1) did not produce better results than the $1:$1 ratio.\nGeographic political context mattered: Donors in “red states” (those that voted for George W. Bush in 2004) were significantly more responsive to the match offer than those in “blue states.”\nNo significant differences were found across different match cap amounts or suggested donation levels.\n\nThis study, published in the American Economic Review (2007), is notable for being one of the first real-world randomized trials testing economic theories of charitable giving on the “demand side”—how donor behavior responds to perceived price changes, framing effects, and social signals in a natural setting.\nThis project seeks to replicate their results."
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#introduction",
    "href": "projects/HW1/hw1_questions.html#introduction",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nTo explore how different “price” signals affect charitable giving, Dean Karlan and John List conducted a large-scale natural field experiment involving over 50,000 prior donors to a U.S.-based liberal nonprofit. The experiment aimed to test whether and how matching grant offers—a common fundraising tactic—alter donor behavior.\nParticipants were randomly assigned to receive one of several different types of fundraising letters. The control group received a standard letter without any mention of a matching grant. The treatment group received a letter with an announcement that a “concerned fellow member” would match their donation. Within the treatment group, further randomization varied three key features:\nMatching ratio: The letters promised either a $1:$1, $2:$1, or $3:$1 match.\nMaximum match amount: The match was capped at either $25,000, $50,000, $100,000, or left unstated.\nSuggested donation amounts: Each participant saw one of three ask amounts—equal to, 1.25×, or 1.5× their highest previous donation.\nThis design allowed the researchers to test both main effects and interaction effects of price (via match ratio), perceived value (via cap), and anchoring (via ask amounts).\nKey Findings:\n\nThe presence of a matching grant increased both the response rate (probability of donating) and the average donation.\nMerely including a match offer increased revenue per solicitation by 19% and the response rate by 22%.\nSurprisingly, higher match ratios ($2:$1 or $3:$1) did not produce better results than the $1:$1 ratio.\nGeographic political context mattered: Donors in “red states” (those that voted for George W. Bush in 2004) were significantly more responsive to the match offer than those in “blue states.”\nNo significant differences were found across different match cap amounts or suggested donation levels.\n\nThis study, published in the American Economic Review (2007), is notable for being one of the first real-world randomized trials testing economic theories of charitable giving on the “demand side”—how donor behavior responds to perceived price changes, framing effects, and social signals in a natural setting.\nThis project seeks to replicate their results."
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#data",
    "href": "projects/HW1/hw1_questions.html#data",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Data",
    "text": "Data\n\nDescription\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\n\ntitle: “Karlan & List 2007 Data Description” format: html execute: echo: true warning: false message: false —"
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#experimental-results",
    "href": "projects/HW1/hw1_questions.html#experimental-results",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\nCharitable Contribution Made\nFirst, I analyze whether matched donations lead to an increased response rate of making a donation.\nWe investigate whether being offered a matching grant (treatment) increased the likelihood of making a donation.\nWe’ll: - Visualize donation rates by group - Perform a Welch’s t-test and a linear regression - Run a probit regression to match results in Table 3, Column 1\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom scipy.stats import t\n\n# --- Barplot: proportion who donated by treatment group ---\ndonation_rates = df.groupby('treatment')['gave'].mean()\n\nplt.figure(figsize=(10, 6))\nplt.bar(['Control', 'Treatment'], donation_rates.values)\nplt.title('Proportion of People Who Donated by Group')\nplt.ylabel('Proportion Donated')\nplt.ylim(0, 0.03)\nplt.grid(axis='y')\nplt.show()\n\n# --- Welch's t-test manually ---\ntreat = df[df['treatment'] == 1]['gave']\ncontrol = df[df['treatment'] == 0]['gave']\n\nx1, x2 = treat.mean(), control.mean()\ns1, s2 = treat.std(ddof=1), control.std(ddof=1)\nn1, n2 = len(treat), len(control)\n\nse = np.sqrt((s1**2 / n1) + (s2**2 / n2))\nt_stat = (x1 - x2) / se\ndf_num = (s1**2 / n1 + s2**2 / n2)**2\ndf_denom = ((s1**2 / n1)**2 / (n1 - 1)) + ((s2**2 / n2)**2 / (n2 - 1))\ndf_welch = df_num / df_denom\np_val_t = 2 * t.sf(np.abs(t_stat), df_welch)\n\n# --- Linear regression ---\nlm = smf.ols('gave ~ treatment', data=df).fit()\n\n# --- Probit regression ---\nprobit = smf.probit('gave ~ treatment', data=df).fit(disp=0)\n\n# --- Output summary ---\nprint(\"=== Barplot: Proportion Donated ===\")\nprint(donation_rates)\n\nprint(\"\\n=== Welch’s t-test ===\")\nprint(f\"t-statistic = {t_stat:.3f}, p-value = {p_val_t:.4f}\")\n\nprint(\"\\n=== Linear Regression ===\")\nprint(lm.summary())\n\nprint(\"\\n=== Probit Regression ===\")\nprint(probit.summary())\n\n\n\n\n\n\n\n\n=== Barplot: Proportion Donated ===\ntreatment\n0    0.017858\n1    0.022039\nName: gave, dtype: float64\n\n=== Welch’s t-test ===\nt-statistic = 3.209, p-value = 0.0013\n\n=== Linear Regression ===\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                  0.000\nMethod:                 Least Squares   F-statistic:                     9.618\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):            0.00193\nTime:                        16:11:57   Log-Likelihood:                 26630.\nNo. Observations:               50083   AIC:                        -5.326e+04\nDf Residuals:                   50081   BIC:                        -5.324e+04\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.0179      0.001     16.225      0.000       0.016       0.020\ntreatment      0.0042      0.001      3.101      0.002       0.002       0.007\n==============================================================================\nOmnibus:                    59814.280   Durbin-Watson:                   2.005\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          4317152.727\nSkew:                           6.740   Prob(JB):                         0.00\nKurtosis:                      46.440   Cond. No.                         3.23\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n=== Probit Regression ===\n                          Probit Regression Results                           \n==============================================================================\nDep. Variable:                   gave   No. Observations:                50083\nModel:                         Probit   Df Residuals:                    50081\nMethod:                           MLE   Df Model:                            1\nDate:                Wed, 23 Apr 2025   Pseudo R-squ.:               0.0009783\nTime:                        16:11:57   Log-Likelihood:                -5030.5\nconverged:                       True   LL-Null:                       -5035.4\nCovariance Type:            nonrobust   LLR p-value:                  0.001696\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     -2.1001      0.023    -90.073      0.000      -2.146      -2.054\ntreatment      0.0868      0.028      3.113      0.002       0.032       0.141\n==============================================================================\n\n\n\n\nDifferences between Match Rates\nNext, I assess the effectiveness of different sizes of matched donations on the response rate.\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom scipy.stats import ttest_ind\n\n# Keep only treated individuals for ratio comparisons\ndf_treat = df[df['treatment'] == 1].copy()\n\n# Create ratio1 dummy (1 if 1:1 match ratio)\ndf_treat['ratio1'] = (df_treat['ratio'] == \"1\").astype(int)\n\n# --- T-tests: comparing response rates between ratio levels ---\ndef ttest_response(var1, var2, label1, label2):\n    g1 = df_treat[df_treat[var1] == 1]['gave']\n    g2 = df_treat[df_treat[var2] == 1]['gave']\n    t_stat, p_val = ttest_ind(g1, g2, equal_var=False)\n    print(f\"T-test: {label1} vs {label2} | t = {t_stat:.3f}, p = {p_val:.4f}\")\n\n# Run t-tests between match ratios\nttest_response('ratio1', 'ratio2', '1:1', '2:1')\nttest_response('ratio2', 'ratio3', '2:1', '3:1')\nttest_response('ratio1', 'ratio3', '1:1', '3:1')\n\n# --- Regression: gave ~ ratio1 + ratio2 + ratio3 (1:1 is omitted baseline) ---\nreg1 = smf.ols(\"gave ~ ratio2 + ratio3\", data=df_treat).fit()\n\n# --- Alternatively: use categorical variable for ratio ---\nreg2 = smf.ols(\"gave ~ C(ratio)\", data=df_treat).fit()\n\n# --- Print regression summaries ---\nprint(\"\\nRegression with dummy variables (1:1 omitted):\")\nprint(reg1.summary())\n\nprint(\"\\nRegression with categorical ratio variable:\")\nprint(reg2.summary())\n\n# --- Response rate differences from raw data ---\nrate_1_1 = df_treat[df_treat['ratio'] == \"1\"]['gave'].mean()\nrate_2_1 = df_treat[df_treat['ratio'] == \"2\"]['gave'].mean()\nrate_3_1 = df_treat[df_treat['ratio'] == \"3\"]['gave'].mean()\n\ndiff_2_1_vs_1_1 = rate_2_1 - rate_1_1\ndiff_3_1_vs_2_1 = rate_3_1 - rate_2_1\n\nprint(f\"\\nResponse Rate Differences from Data:\")\nprint(f\"2:1 - 1:1 = {diff_2_1_vs_1_1:.4f}\")\nprint(f\"3:1 - 2:1 = {diff_3_1_vs_2_1:.4f}\")\n\n# --- Compare to regression coefficients ---\ncoef_2_1 = reg1.params['ratio2']\ncoef_3_1 = reg1.params['ratio3']\ndiff_coef_3_1_vs_2_1 = coef_3_1 - coef_2_1\n\nprint(f\"\\nResponse Rate Differences from Regression Coefficients:\")\nprint(f\"2:1 - 1:1 = {coef_2_1:.4f}\")\nprint(f\"3:1 - 2:1 = {diff_coef_3_1_vs_2_1:.4f}\")\n\nT-test: 1:1 vs 2:1 | t = nan, p = nan\nT-test: 2:1 vs 3:1 | t = -0.050, p = 0.9600\nT-test: 1:1 vs 3:1 | t = nan, p = nan\n\nRegression with dummy variables (1:1 omitted):\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                 -0.000\nMethod:                 Least Squares   F-statistic:                    0.6454\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):              0.524\nTime:                        16:11:57   Log-Likelihood:                 16688.\nNo. Observations:               33396   AIC:                        -3.337e+04\nDf Residuals:                   33393   BIC:                        -3.334e+04\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.0207      0.001     14.912      0.000       0.018       0.023\nratio2         0.0019      0.002      0.958      0.338      -0.002       0.006\nratio3         0.0020      0.002      1.008      0.313      -0.002       0.006\n==============================================================================\nOmnibus:                    38963.957   Durbin-Watson:                   1.995\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          2506478.937\nSkew:                           6.511   Prob(JB):                         0.00\nKurtosis:                      43.394   Cond. No.                         3.73\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\nRegression with categorical ratio variable:\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                 -0.000\nMethod:                 Least Squares   F-statistic:                    0.4263\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):              0.734\nTime:                        16:11:57   Log-Likelihood:                 16688.\nNo. Observations:               33396   AIC:                        -3.337e+04\nDf Residuals:                   33392   BIC:                        -3.333e+04\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n=================================================================================\n                    coef    std err          t      P&gt;|t|      [0.025      0.975]\n---------------------------------------------------------------------------------\nIntercept       1.23e+09   1.12e+10      0.110      0.912   -2.07e+10    2.32e+10\nC(ratio)[T.1]  -1.23e+09   1.12e+10     -0.110      0.912   -2.32e+10    2.07e+10\nC(ratio)[T.2]  -1.23e+09   1.12e+10     -0.110      0.912   -2.32e+10    2.07e+10\nC(ratio)[T.3]  -1.23e+09   1.12e+10     -0.110      0.912   -2.32e+10    2.07e+10\n==============================================================================\nOmnibus:                    38963.855   Durbin-Watson:                   1.995\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          2506451.717\nSkew:                           6.511   Prob(JB):                         0.00\nKurtosis:                      43.394   Cond. No.                     3.22e+13\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The smallest eigenvalue is 4.31e-23. This might indicate that there are\nstrong multicollinearity problems or that the design matrix is singular.\n\nResponse Rate Differences from Data:\n2:1 - 1:1 = nan\n3:1 - 2:1 = nan\n\nResponse Rate Differences from Regression Coefficients:\n2:1 - 1:1 = 0.0019\n3:1 - 2:1 = 0.0001\n\n\n\n\nSize of Charitable Contribution\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\nWe explore whether being offered a matching grant affects: 1. How much people donate on average (unconditionally) 2. How much people donate among those who do give (conditionally) 3. The distribution of donations with annotated averages\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\n\n# --- Unconditional regression (all people) ---\nmodel_uncond = smf.ols(\"amount ~ treatment\", data=df).fit()\nprint(\"Unconditional OLS regression (donation amount on treatment):\")\nprint(model_uncond.summary())\n\n# --- Conditional regression (only among donors) ---\ndf_donors = df[df['gave'] == 1]\nmodel_cond = smf.ols(\"amount ~ treatment\", data=df_donors).fit()\nprint(\"\\nConditional OLS regression (amount | gave == 1):\")\nprint(model_cond.summary())\n\n# --- Interpretation prompt ---\nprint(\"\\nInterpretation:\")\nprint(\"- The unconditional regression includes everyone and reflects both intensive (amount) and extensive (whether they donated) margins.\")\nprint(\"- The conditional regression isolates only the intensive margin — how much donors gave once they decided to give.\")\nprint(\"- The treatment coefficient in the conditional regression does NOT have a direct causal interpretation; it's conditional on post-treatment behavior.\")\n\n# --- Histograms of donation amounts among donors, by treatment ---\ntreat_donors = df_donors[df_donors['treatment'] == 1]['amount']\ncontrol_donors = df_donors[df_donors['treatment'] == 0]['amount']\n\nplt.figure(figsize=(14, 6))\n\n# Control group\nplt.subplot(1, 2, 1)\nplt.hist(control_donors, bins=30, alpha=0.7, color='skyblue', edgecolor='black')\nplt.axvline(control_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Control Group: Donation Amounts (Among Donors)')\nplt.xlabel('Amount Donated')\nplt.ylabel('Frequency')\nplt.text(control_donors.mean(), plt.ylim()[1]*0.9, f\"Mean: {control_donors.mean():.2f}\", color='red')\n\n# Treatment group\nplt.subplot(1, 2, 2)\nplt.hist(treat_donors, bins=30, alpha=0.7, color='lightgreen', edgecolor='black')\nplt.axvline(treat_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Treatment Group: Donation Amounts (Among Donors)')\nplt.xlabel('Amount Donated')\nplt.ylabel('Frequency')\nplt.text(treat_donors.mean(), plt.ylim()[1]*0.9, f\"Mean: {treat_donors.mean():.2f}\", color='red')\n\nplt.tight_layout()\nplt.show()\n\nUnconditional OLS regression (donation amount on treatment):\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 amount   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                  0.000\nMethod:                 Least Squares   F-statistic:                     3.461\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):             0.0628\nTime:                        16:11:57   Log-Likelihood:            -1.7946e+05\nNo. Observations:               50083   AIC:                         3.589e+05\nDf Residuals:                   50081   BIC:                         3.589e+05\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.8133      0.067     12.063      0.000       0.681       0.945\ntreatment      0.1536      0.083      1.861      0.063      -0.008       0.315\n==============================================================================\nOmnibus:                    96861.113   Durbin-Watson:                   2.008\nProb(Omnibus):                  0.000   Jarque-Bera (JB):        240735713.635\nSkew:                          15.297   Prob(JB):                         0.00\nKurtosis:                     341.269   Cond. No.                         3.23\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\nConditional OLS regression (amount | gave == 1):\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 amount   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                 -0.001\nMethod:                 Least Squares   F-statistic:                    0.3374\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):              0.561\nTime:                        16:11:57   Log-Likelihood:                -5326.8\nNo. Observations:                1034   AIC:                         1.066e+04\nDf Residuals:                    1032   BIC:                         1.067e+04\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     45.5403      2.423     18.792      0.000      40.785      50.296\ntreatment     -1.6684      2.872     -0.581      0.561      -7.305       3.968\n==============================================================================\nOmnibus:                      587.258   Durbin-Watson:                   2.031\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             5623.279\nSkew:                           2.464   Prob(JB):                         0.00\nKurtosis:                      13.307   Cond. No.                         3.49\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\nInterpretation:\n- The unconditional regression includes everyone and reflects both intensive (amount) and extensive (whether they donated) margins.\n- The conditional regression isolates only the intensive margin — how much donors gave once they decided to give.\n- The treatment coefficient in the conditional regression does NOT have a direct causal interpretation; it's conditional on post-treatment behavior."
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#simulation-experiment",
    "href": "projects/HW1/hw1_questions.html#simulation-experiment",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulation Experiment",
    "text": "Simulation Experiment\nAs a reminder of how the t-statistic “works,” in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\nSuppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made.\nFurther suppose that the true distribution of respondents who do get a charitable donation match of any size is Bernoulli with probability p=0.022 that a donation is made.\n\nLaw of Large Numbers\nTo simulate the intuition behind comparing group means, we draw: - 100,000 samples from the control group donation distribution - 10,000 samples from the treatment group We compute the difference between paired samples and plot the cumulative average of the differences.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Use unconditional donation amount distributions\ncontrol_dist = df[df['treatment'] == 0]['amount']\ntreatment_dist = df[df['treatment'] == 1]['amount']\n\n# Simulate draws\nnp.random.seed(42)\nsim_control = np.random.choice(control_dist, size=100000, replace=True)\nsim_treat = np.random.choice(treatment_dist, size=10000, replace=True)\n\n# Match lengths for subtraction (repeat treatment sample)\nsim_treat_matched = np.tile(sim_treat, 10)  # Now length = 100000\n\n# Compute vector of differences\ndiffs = sim_treat_matched - sim_control\n\n# Compute cumulative average\ncumulative_avg = np.cumsum(diffs) / np.arange(1, len(diffs) + 1)\n\n# True difference in means\ntrue_diff = treatment_dist.mean() - control_dist.mean()\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(cumulative_avg, label='Cumulative Average of Differences')\nplt.axhline(true_diff, color='red', linestyle='--', linewidth=2, label='True Mean Difference')\nplt.xlabel('Number of Samples')\nplt.ylabel('Cumulative Average (Treatment - Control)')\nplt.title('Simulated Cumulative Average of Donation Differences')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Display true difference for interpretation\nprint(f\"\\nTrue difference in average donation amount (treatment - control): {true_diff:.4f}\")\n\n\n\n\n\n\n\n\n\nTrue difference in average donation amount (treatment - control): 0.1536\n\n\n\n\nCentral Limit Theorem\nWe simulate 1000 experiments at each sample size (50, 200, 500, 1000). Each experiment: - Takes independent samples from control and treatment donation distributions - Computes the mean difference in donations We then plot histograms of these mean differences and observe whether zero falls near the center or in the tails.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Extract full distributions\ncontrol = df[df['treatment'] == 0]['amount'].values\ntreatment = df[df['treatment'] == 1]['amount'].values\n\n# Sample sizes to simulate\nsample_sizes = [50, 200, 500, 1000]\nn_simulations = 1000\n\n# Prepare for plots\nfig, axs = plt.subplots(2, 2, figsize=(14, 10))\naxs = axs.flatten()\n\n# Run simulation and plotting loop\nnp.random.seed(123)\nfor i, n in enumerate(sample_sizes):\n    diff_means = []\n    for _ in range(n_simulations):\n        sample_control = np.random.choice(control, n, replace=True)\n        sample_treatment = np.random.choice(treatment, n, replace=True)\n        diff_means.append(sample_treatment.mean() - sample_control.mean())\n    \n    axs[i].hist(diff_means, bins=30, color='skyblue', edgecolor='black')\n    axs[i].axvline(0, color='red', linestyle='--', linewidth=2, label=\"Zero\")\n    axs[i].set_title(f\"Sample Size = {n}\")\n    axs[i].set_xlabel(\"Average Difference (Treatment - Control)\")\n    axs[i].set_ylabel(\"Frequency\")\n    axs[i].legend()\n\nplt.suptitle(\"Distributions of Average Differences from 1000 Simulated Experiments\")\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()"
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#load-and-describe-dataset",
    "href": "projects/HW1/hw1_questions.html#load-and-describe-dataset",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Load and Describe Dataset",
    "text": "Load and Describe Dataset\n\nimport pandas as pd\n\n# Load the dataset\ndata_path = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_path)\n\n# Identify variable types\nnumerical_vars = df.select_dtypes(include=['number']).columns.tolist()\ncategorical_vars = df.select_dtypes(include=['category']).columns.tolist()\n\n# Summary statistics for numerical variables\nsummary_stats = df.describe()\n\n# Display variable types and summary\nprint(\"Numerical Variables:\")\nfor var in numerical_vars:\n    print(f\" - {var}\")\n\nprint(\"\\nCategorical Variables:\")\nfor var in categorical_vars:\n    print(f\" - {var}\")\n\nprint(\"\\nSummary Statistics for Numerical Variables:\")\nprint(summary_stats)\n\nNumerical Variables:\n - treatment\n - control\n - ratio2\n - ratio3\n - size25\n - size50\n - size100\n - sizeno\n - askd1\n - askd2\n - askd3\n - ask1\n - ask2\n - ask3\n - amount\n - gave\n - amountchange\n - hpa\n - ltmedmra\n - freq\n - years\n - year5\n - mrm2\n - dormant\n - female\n - couple\n - state50one\n - nonlit\n - cases\n - statecnt\n - stateresponse\n - stateresponset\n - stateresponsec\n - stateresponsetminc\n - perbush\n - close25\n - red0\n - blue0\n - redcty\n - bluecty\n - pwhite\n - pblack\n - page18_39\n - ave_hh_sz\n - median_hhincome\n - powner\n - psch_atlstba\n - pop_propurban\n\nCategorical Variables:\n - ratio\n - size\n - ask\n\nSummary Statistics for Numerical Variables:\n          treatment       control        ratio2        ratio3        size25  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.666813      0.333187      0.222311      0.222211      0.166723   \nstd        0.471357      0.471357      0.415803      0.415736      0.372732   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        1.000000      0.000000      0.000000      0.000000      0.000000   \n75%        1.000000      1.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n             size50       size100        sizeno         askd1         askd2  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.166623      0.166723      0.166743      0.222311      0.222291   \nstd        0.372643      0.372732      0.372750      0.415803      0.415790   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n75%        0.000000      0.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n       ...        redcty       bluecty        pwhite        pblack  \\\ncount  ...  49978.000000  49978.000000  48217.000000  48047.000000   \nmean   ...      0.510245      0.488715      0.819599      0.086710   \nstd    ...      0.499900      0.499878      0.168560      0.135868   \nmin    ...      0.000000      0.000000      0.009418      0.000000   \n25%    ...      0.000000      0.000000      0.755845      0.014729   \n50%    ...      1.000000      0.000000      0.872797      0.036554   \n75%    ...      1.000000      1.000000      0.938827      0.090882   \nmax    ...      1.000000      1.000000      1.000000      0.989622   \n\n          page18_39     ave_hh_sz  median_hhincome        powner  \\\ncount  48217.000000  48221.000000     48209.000000  48214.000000   \nmean       0.321694      2.429012     54815.700533      0.669418   \nstd        0.103039      0.378105     22027.316665      0.193405   \nmin        0.000000      0.000000      5000.000000      0.000000   \n25%        0.258311      2.210000     39181.000000      0.560222   \n50%        0.305534      2.440000     50673.000000      0.712296   \n75%        0.369132      2.660000     66005.000000      0.816798   \nmax        0.997544      5.270000    200001.000000      1.000000   \n\n       psch_atlstba  pop_propurban  \ncount  48215.000000   48217.000000  \nmean       0.391661       0.871968  \nstd        0.186599       0.258633  \nmin        0.000000       0.000000  \n25%        0.235647       0.884929  \n50%        0.373744       1.000000  \n75%        0.530036       1.000000  \nmax        1.000000       1.000000  \n\n[8 rows x 48 columns]\n\n\n\nBalance Test\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\nIn this section, we check if the variable mrm2 (months since last donation) is balanced across treatment and control groups. We do this using:\n\nA Welch’s t-test using the formula from class\nA linear regression of mrm2 on treatment\n\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom scipy import stats\n\n# Filter for valid mrm2 values\ndf_mrm2 = df[['mrm2', 'treatment']].dropna()\n\n# Split groups\ntreat = df_mrm2[df_mrm2['treatment'] == 1]['mrm2']\ncontrol = df_mrm2[df_mrm2['treatment'] == 0]['mrm2']\n\n# Sample statistics\nx1, x2 = treat.mean(), control.mean()\ns1, s2 = treat.std(ddof=1), control.std(ddof=1)\nn1, n2 = len(treat), len(control)\n\n# Welch's t-test manually (from slide 37)\nse_diff = np.sqrt((s1**2 / n1) + (s2**2 / n2))\nt_stat = (x1 - x2) / se_diff\n\n# Degrees of freedom (Welch–Satterthwaite)\ndf_num = (s1**2 / n1 + s2**2 / n2)**2\ndf_denom = ((s1**2 / n1)**2 / (n1 - 1)) + ((s2**2 / n2)**2 / (n2 - 1))\ndf_welch = df_num / df_denom\n\n# Two-sided p-value\np_val_ttest = 2 * stats.t.sf(np.abs(t_stat), df_welch)\n\n# Linear regression\nmodel = smf.ols('mrm2 ~ treatment', data=df_mrm2).fit()\n\n# Show results\nprint(f\"Welch's t-statistic: {t_stat:.3f}\")\nprint(f\"Welch's p-value: {p_val_ttest:.3f}\")\nprint(f\"Regression coefficient (treatment effect): {model.params['treatment']:.3f}\")\nprint(f\"Regression t-statistic: {model.tvalues['treatment']:.3f}\")\nprint(f\"Regression p-value: {model.pvalues['treatment']:.3f}\")\n\nWelch's t-statistic: 0.120\nWelch's p-value: 0.905\nRegression coefficient (treatment effect): 0.014\nRegression t-statistic: 0.119\nRegression p-value: 0.905"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "Nadifa's Awesome Work",
    "section": "",
    "text": "import pandas as pd\n\n# Load the dataset\ndata_path = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_path)\n\n# Dictionary of variable descriptions\ndescriptions = {\n    \"treatment\": \"Treatment\",\n    \"control\": \"Control\",\n    \"ratio\": \"Match ratio\",\n    \"ratio2\": \"2:1 match ratio\",\n    \"ratio3\": \"3:1 match ratio\",\n    \"size\": \"Match threshold\",\n    \"size25\": \"$25,000 match threshold\",\n    \"size50\": \"$50,000 match threshold\",\n    \"size100\": \"$100,000 match threshold\",\n    \"sizeno\": \"Unstated match threshold\",\n    \"ask\": \"Suggested donation amount\",\n    \"askd1\": \"Suggested donation was highest previous contribution\",\n    \"askd2\": \"Suggested donation was 1.25 x highest previous contribution\",\n    \"askd3\": \"Suggested donation was 1.50 x highest previous contribution\",\n    \"ask1\": \"Highest previous contribution (for suggestion)\",\n    \"ask2\": \"1.25 x highest previous contribution (for suggestion)\",\n    \"ask3\": \"1.50 x highest previous contribution (for suggestion)\",\n    \"amount\": \"Dollars given\",\n    \"gave\": \"Gave anything\",\n    \"amountchange\": \"Change in amount given\",\n    \"hpa\": \"Highest previous contribution\",\n    \"ltmedmra\": \"Small prior donor: last gift was less than median $35\",\n    \"freq\": \"Number of prior donations\",\n    \"years\": \"Number of years since initial donation\",\n    \"year5\": \"At least 5 years since initial donation\",\n    \"mrm2\": \"Number of months since last donation\",\n    \"dormant\": \"Already donated in 2005\",\n    \"female\": \"Female\",\n    \"couple\": \"Couple\",\n    \"state50one\": \"State tag: 1 for one observation of each of 50 states; 0 otherwise\",\n    \"nonlit\": \"Nonlitigation\",\n    \"cases\": \"Court cases from state in 2004-5 in which organization was involved\",\n    \"statecnt\": \"Percent of sample from state\",\n    \"stateresponse\": \"Proportion of sample from the state who gave\",\n    \"stateresponset\": \"Proportion of treated sample from the state who gave\",\n    \"stateresponsec\": \"Proportion of control sample from the state who gave\",\n    \"stateresponsetminc\": \"stateresponset - stateresponsec\",\n    \"perbush\": \"State vote share for Bush\",\n    \"close25\": \"State vote share for Bush between 47.5% and 52.5%\",\n    \"red0\": \"Red state\",\n    \"blue0\": \"Blue state\",\n    \"redcty\": \"Red county\",\n    \"bluecty\": \"Blue county\",\n    \"pwhite\": \"Proportion white within zip code\",\n    \"pblack\": \"Proportion black within zip code\",\n    \"page18_39\": \"Proportion age 18-39 within zip code\",\n    \"ave_hh_sz\": \"Average household size within zip code\",\n    \"median_hhincome\": \"Median household income within zip code\",\n    \"powner\": \"Proportion house owner within zip code\",\n    \"psch_atlstba\": \"Proportion who finished college within zip code\",\n    \"pop_propurban\": \"Proportion of population urban within zip code\"\n}\n\nprint(\"\\nVariable Descriptions:\")\nfor var, desc in descriptions.items():\n    print(f\" - `{var}`: {desc}\")\n# Identify variable types\nnumerical_vars = df.select_dtypes(include=['number']).columns.tolist()\ncategorical_vars = df.select_dtypes(include=['category']).columns.tolist()\n\n# Summary statistics for numerical variables\nsummary_stats = df.describe()\n\n# Display variable types and summary\nprint(\"Numerical Variables:\")\nfor var in numerical_vars:\n    print(f\" - {var}\")\n\nprint(\"\\nCategorical Variables:\")\nfor var in categorical_vars:\n    print(f\" - {var}\")\n\nprint(\"\\nSummary Statistics for Numerical Variables:\")\nprint(summary_stats)\n\n\n\n\nVariable Descriptions:\n - `treatment`: Treatment\n - `control`: Control\n - `ratio`: Match ratio\n - `ratio2`: 2:1 match ratio\n - `ratio3`: 3:1 match ratio\n - `size`: Match threshold\n - `size25`: $25,000 match threshold\n - `size50`: $50,000 match threshold\n - `size100`: $100,000 match threshold\n - `sizeno`: Unstated match threshold\n - `ask`: Suggested donation amount\n - `askd1`: Suggested donation was highest previous contribution\n - `askd2`: Suggested donation was 1.25 x highest previous contribution\n - `askd3`: Suggested donation was 1.50 x highest previous contribution\n - `ask1`: Highest previous contribution (for suggestion)\n - `ask2`: 1.25 x highest previous contribution (for suggestion)\n - `ask3`: 1.50 x highest previous contribution (for suggestion)\n - `amount`: Dollars given\n - `gave`: Gave anything\n - `amountchange`: Change in amount given\n - `hpa`: Highest previous contribution\n - `ltmedmra`: Small prior donor: last gift was less than median $35\n - `freq`: Number of prior donations\n - `years`: Number of years since initial donation\n - `year5`: At least 5 years since initial donation\n - `mrm2`: Number of months since last donation\n - `dormant`: Already donated in 2005\n - `female`: Female\n - `couple`: Couple\n - `state50one`: State tag: 1 for one observation of each of 50 states; 0 otherwise\n - `nonlit`: Nonlitigation\n - `cases`: Court cases from state in 2004-5 in which organization was involved\n - `statecnt`: Percent of sample from state\n - `stateresponse`: Proportion of sample from the state who gave\n - `stateresponset`: Proportion of treated sample from the state who gave\n - `stateresponsec`: Proportion of control sample from the state who gave\n - `stateresponsetminc`: stateresponset - stateresponsec\n - `perbush`: State vote share for Bush\n - `close25`: State vote share for Bush between 47.5% and 52.5%\n - `red0`: Red state\n - `blue0`: Blue state\n - `redcty`: Red county\n - `bluecty`: Blue county\n - `pwhite`: Proportion white within zip code\n - `pblack`: Proportion black within zip code\n - `page18_39`: Proportion age 18-39 within zip code\n - `ave_hh_sz`: Average household size within zip code\n - `median_hhincome`: Median household income within zip code\n - `powner`: Proportion house owner within zip code\n - `psch_atlstba`: Proportion who finished college within zip code\n - `pop_propurban`: Proportion of population urban within zip code\nNumerical Variables:\n - treatment\n - control\n - ratio2\n - ratio3\n - size25\n - size50\n - size100\n - sizeno\n - askd1\n - askd2\n - askd3\n - ask1\n - ask2\n - ask3\n - amount\n - gave\n - amountchange\n - hpa\n - ltmedmra\n - freq\n - years\n - year5\n - mrm2\n - dormant\n - female\n - couple\n - state50one\n - nonlit\n - cases\n - statecnt\n - stateresponse\n - stateresponset\n - stateresponsec\n - stateresponsetminc\n - perbush\n - close25\n - red0\n - blue0\n - redcty\n - bluecty\n - pwhite\n - pblack\n - page18_39\n - ave_hh_sz\n - median_hhincome\n - powner\n - psch_atlstba\n - pop_propurban\n\nCategorical Variables:\n - ratio\n - size\n - ask\n\nSummary Statistics for Numerical Variables:\n          treatment       control        ratio2        ratio3        size25  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.666813      0.333187      0.222311      0.222211      0.166723   \nstd        0.471357      0.471357      0.415803      0.415736      0.372732   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        1.000000      0.000000      0.000000      0.000000      0.000000   \n75%        1.000000      1.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n             size50       size100        sizeno         askd1         askd2  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.166623      0.166723      0.166743      0.222311      0.222291   \nstd        0.372643      0.372732      0.372750      0.415803      0.415790   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n75%        0.000000      0.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n       ...        redcty       bluecty        pwhite        pblack  \\\ncount  ...  49978.000000  49978.000000  48217.000000  48047.000000   \nmean   ...      0.510245      0.488715      0.819599      0.086710   \nstd    ...      0.499900      0.499878      0.168560      0.135868   \nmin    ...      0.000000      0.000000      0.009418      0.000000   \n25%    ...      0.000000      0.000000      0.755845      0.014729   \n50%    ...      1.000000      0.000000      0.872797      0.036554   \n75%    ...      1.000000      1.000000      0.938827      0.090882   \nmax    ...      1.000000      1.000000      1.000000      0.989622   \n\n          page18_39     ave_hh_sz  median_hhincome        powner  \\\ncount  48217.000000  48221.000000     48209.000000  48214.000000   \nmean       0.321694      2.429012     54815.700533      0.669418   \nstd        0.103039      0.378105     22027.316665      0.193405   \nmin        0.000000      0.000000      5000.000000      0.000000   \n25%        0.258311      2.210000     39181.000000      0.560222   \n50%        0.305534      2.440000     50673.000000      0.712296   \n75%        0.369132      2.660000     66005.000000      0.816798   \nmax        0.997544      5.270000    200001.000000      1.000000   \n\n       psch_atlstba  pop_propurban  \ncount  48215.000000   48217.000000  \nmean       0.391661       0.871968  \nstd        0.186599       0.258633  \nmin        0.000000       0.000000  \n25%        0.235647       0.884929  \n50%        0.373744       1.000000  \n75%        0.530036       1.000000  \nmax        1.000000       1.000000  \n\n[8 rows x 48 columns]\n\n\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom scipy import stats\n\n# Load dataset\ndf = pd.read_stata(\"projects/HW1/karlan_list_2007.dta\")\n\n# Filter for valid mrm2 values\ndf_mrm2 = df[['mrm2', 'treatment']].dropna()\n\n# Split groups\ntreat = df_mrm2[df_mrm2['treatment'] == 1]['mrm2']\ncontrol = df_mrm2[df_mrm2['treatment'] == 0]['mrm2']\n\n# Sample statistics\nx1, x2 = treat.mean(), control.mean()\ns1, s2 = treat.std(ddof=1), control.std(ddof=1)\nn1, n2 = len(treat), len(control)\n\n# Welch's t-test manually (from slide 37)\nse_diff = np.sqrt((s1**2 / n1) + (s2**2 / n2))\nt_stat = (x1 - x2) / se_diff\n\n# Degrees of freedom (Welch–Satterthwaite)\ndf_num = (s1**2 / n1 + s2**2 / n2)**2\ndf_denom = ((s1**2 / n1)**2 / (n1 - 1)) + ((s2**2 / n2)**2 / (n2 - 1))\ndf_welch = df_num / df_denom\n\n# Two-sided p-value\np_val_ttest = 2 * stats.t.sf(np.abs(t_stat), df_welch)\n\n# Linear regression\nmodel = smf.ols('mrm2 ~ treatment', data=df_mrm2).fit()\n\n# Show results\nprint(f\"Welch's t-statistic: {t_stat:.3f}\")\nprint(f\"Welch's p-value: {p_val_ttest:.3f}\")\nprint(f\"Regression coefficient (treatment effect): {model.params['treatment']:.3f}\")\nprint(f\"Regression t-statistic: {model.tvalues['treatment']:.3f}\")\nprint(f\"Regression p-value: {model.pvalues['treatment']:.3f}\")\n\nWelch's t-statistic: 0.120\nWelch's p-value: 0.905\nRegression coefficient (treatment effect): 0.014\nRegression t-statistic: 0.119\nRegression p-value: 0.905"
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#randomization-check-testing-baseline-balance",
    "href": "projects/HW1/hw1_questions.html#randomization-check-testing-baseline-balance",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Randomization Check: Testing Baseline Balance",
    "text": "Randomization Check: Testing Baseline Balance\nIn this section, we check if the variable mrm2 (months since last donation) is balanced across treatment and control groups. We do this using:\n\nA Welch’s t-test using the formula from class\nA linear regression of mrm2 on treatment\n\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom scipy import stats\n\n# Load dataset\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\n# Filter for valid mrm2 values\ndf_mrm2 = df[['mrm2', 'treatment']].dropna()\n\n# Split groups\ntreat = df_mrm2[df_mrm2['treatment'] == 1]['mrm2']\ncontrol = df_mrm2[df_mrm2['treatment'] == 0]['mrm2']\n\n# Sample statistics\nx1, x2 = treat.mean(), control.mean()\ns1, s2 = treat.std(ddof=1), control.std(ddof=1)\nn1, n2 = len(treat), len(control)\n\n# Welch's t-test manually (from slide 37)\nse_diff = np.sqrt((s1**2 / n1) + (s2**2 / n2))\nt_stat = (x1 - x2) / se_diff\n\n# Degrees of freedom (Welch–Satterthwaite)\ndf_num = (s1**2 / n1 + s2**2 / n2)**2\ndf_denom = ((s1**2 / n1)**2 / (n1 - 1)) + ((s2**2 / n2)**2 / (n2 - 1))\ndf_welch = df_num / df_denom\n\n# Two-sided p-value\np_val_ttest = 2 * stats.t.sf(np.abs(t_stat), df_welch)\n\n# Linear regression\nmodel = smf.ols('mrm2 ~ treatment', data=df_mrm2).fit()\n\n# Show results\nprint(f\"Welch's t-statistic: {t_stat:.3f}\")\nprint(f\"Welch's p-value: {p_val_ttest:.3f}\")\nprint(f\"Regression coefficient (treatment effect): {model.params['treatment']:.3f}\")\nprint(f\"Regression t-statistic: {model.tvalues['treatment']:.3f}\")\nprint(f\"Regression p-value: {model.pvalues['treatment']:.3f}\")\n\nWelch's t-statistic: 0.120\nWelch's p-value: 0.905\nRegression coefficient (treatment effect): 0.014\nRegression t-statistic: 0.119\nRegression p-value: 0.905"
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#treatment-effects-on-donation-behavior",
    "href": "projects/HW1/hw1_questions.html#treatment-effects-on-donation-behavior",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Treatment Effects on Donation Behavior",
    "text": "Treatment Effects on Donation Behavior\nWe investigate whether being offered a matching grant (treatment) increased the likelihood of making a donation.\nWe’ll: - Visualize donation rates by group - Perform a Welch’s t-test and a linear regression - Run a probit regression to match results in Table 3, Column 1\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom scipy.stats import t\n\n# Load the data\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\n# --- Barplot: proportion who donated by treatment group ---\ndonation_rates = df.groupby('treatment')['gave'].mean()\n\nplt.figure(figsize=(10, 6))\nplt.bar(['Control', 'Treatment'], donation_rates.values)\nplt.title('Proportion of People Who Donated by Group')\nplt.ylabel('Proportion Donated')\nplt.ylim(0, 0.03)\nplt.grid(axis='y')\nplt.show()\n\n# --- Welch's t-test manually ---\ntreat = df[df['treatment'] == 1]['gave']\ncontrol = df[df['treatment'] == 0]['gave']\n\nx1, x2 = treat.mean(), control.mean()\ns1, s2 = treat.std(ddof=1), control.std(ddof=1)\nn1, n2 = len(treat), len(control)\n\nse = np.sqrt((s1**2 / n1) + (s2**2 / n2))\nt_stat = (x1 - x2) / se\ndf_num = (s1**2 / n1 + s2**2 / n2)**2\ndf_denom = ((s1**2 / n1)**2 / (n1 - 1)) + ((s2**2 / n2)**2 / (n2 - 1))\ndf_welch = df_num / df_denom\np_val_t = 2 * t.sf(np.abs(t_stat), df_welch)\n\n# --- Linear regression ---\nlm = smf.ols('gave ~ treatment', data=df).fit()\n\n# --- Probit regression ---\nprobit = smf.probit('gave ~ treatment', data=df).fit(disp=0)\n\n# --- Output summary ---\nprint(\"=== Barplot: Proportion Donated ===\")\nprint(donation_rates)\n\nprint(\"\\n=== Welch’s t-test ===\")\nprint(f\"t-statistic = {t_stat:.3f}, p-value = {p_val_t:.4f}\")\n\nprint(\"\\n=== Linear Regression ===\")\nprint(lm.summary())\n\nprint(\"\\n=== Probit Regression ===\")\nprint(probit.summary())\n\n\n\n\n\n\n\n\n=== Barplot: Proportion Donated ===\ntreatment\n0    0.017858\n1    0.022039\nName: gave, dtype: float64\n\n=== Welch’s t-test ===\nt-statistic = 3.209, p-value = 0.0013\n\n=== Linear Regression ===\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                  0.000\nMethod:                 Least Squares   F-statistic:                     9.618\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):            0.00193\nTime:                        15:00:38   Log-Likelihood:                 26630.\nNo. Observations:               50083   AIC:                        -5.326e+04\nDf Residuals:                   50081   BIC:                        -5.324e+04\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.0179      0.001     16.225      0.000       0.016       0.020\ntreatment      0.0042      0.001      3.101      0.002       0.002       0.007\n==============================================================================\nOmnibus:                    59814.280   Durbin-Watson:                   2.005\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          4317152.727\nSkew:                           6.740   Prob(JB):                         0.00\nKurtosis:                      46.440   Cond. No.                         3.23\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n=== Probit Regression ===\n                          Probit Regression Results                           \n==============================================================================\nDep. Variable:                   gave   No. Observations:                50083\nModel:                         Probit   Df Residuals:                    50081\nMethod:                           MLE   Df Model:                            1\nDate:                Wed, 23 Apr 2025   Pseudo R-squ.:               0.0009783\nTime:                        15:00:38   Log-Likelihood:                -5030.5\nconverged:                       True   LL-Null:                       -5035.4\nCovariance Type:            nonrobust   LLR p-value:                  0.001696\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     -2.1001      0.023    -90.073      0.000      -2.146      -2.054\ntreatment      0.0868      0.028      3.113      0.002       0.032       0.141\n==============================================================================\n\n\n\nDifferences between Match Rates\nNext, I assess the effectiveness of different sizes of matched donations on the response rate.\ntodo: Use a series of t-tests to test whether the size of the match ratio has an effect on whether people donate or not. For example, does the 2:1 match rate lead increase the likelihood that someone donates as compared to the 1:1 match rate? Do your results support the “figures suggest” comment the authors make on page 8?\ntodo: Assess the same issue using a regression. Specifically, create the variable ratio1 then regress gave on ratio1, ratio2, and ratio3 (or alternatively, regress gave on the categorical variable ratio). Interpret the coefficients and their statistical precision.\ntodo: Calculate the response rate difference between the 1:1 and 2:1 match ratios and the 2:1 and 3:1 ratios. Do this directly from the data, and do it by computing the differences in the fitted coefficients of the previous regression. what do you conclude regarding the effectiveness of different sizes of matched donations?\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom scipy.stats import ttest_ind\n\n# Load the dataset\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\n# Keep only treated individuals for ratio comparisons\ndf_treat = df[df['treatment'] == 1].copy()\n\n# Create ratio1 dummy (1 if 1:1 match ratio)\ndf_treat['ratio1'] = (df_treat['ratio'] == \"1\").astype(int)\n\n# --- T-tests: comparing response rates between ratio levels ---\ndef ttest_response(var1, var2, label1, label2):\n    g1 = df_treat[df_treat[var1] == 1]['gave']\n    g2 = df_treat[df_treat[var2] == 1]['gave']\n    t_stat, p_val = ttest_ind(g1, g2, equal_var=False)\n    print(f\"T-test: {label1} vs {label2} | t = {t_stat:.3f}, p = {p_val:.4f}\")\n\n# Run t-tests between match ratios\nttest_response('ratio1', 'ratio2', '1:1', '2:1')\nttest_response('ratio2', 'ratio3', '2:1', '3:1')\nttest_response('ratio1', 'ratio3', '1:1', '3:1')\n\n# --- Regression: gave ~ ratio1 + ratio2 + ratio3 (1:1 is omitted baseline) ---\nreg1 = smf.ols(\"gave ~ ratio2 + ratio3\", data=df_treat).fit()\n\n# --- Alternatively: use categorical variable for ratio ---\nreg2 = smf.ols(\"gave ~ C(ratio)\", data=df_treat).fit()\n\n# --- Print regression summaries ---\nprint(\"\\nRegression with dummy variables (1:1 omitted):\")\nprint(reg1.summary())\n\nprint(\"\\nRegression with categorical ratio variable:\")\nprint(reg2.summary())\n\n# --- Response rate differences from raw data ---\nrate_1_1 = df_treat[df_treat['ratio'] == \"1\"]['gave'].mean()\nrate_2_1 = df_treat[df_treat['ratio'] == \"2\"]['gave'].mean()\nrate_3_1 = df_treat[df_treat['ratio'] == \"3\"]['gave'].mean()\n\ndiff_2_1_vs_1_1 = rate_2_1 - rate_1_1\ndiff_3_1_vs_2_1 = rate_3_1 - rate_2_1\n\nprint(f\"\\nResponse Rate Differences from Data:\")\nprint(f\"2:1 - 1:1 = {diff_2_1_vs_1_1:.4f}\")\nprint(f\"3:1 - 2:1 = {diff_3_1_vs_2_1:.4f}\")\n\n# --- Compare to regression coefficients ---\ncoef_2_1 = reg1.params['ratio2']\ncoef_3_1 = reg1.params['ratio3']\ndiff_coef_3_1_vs_2_1 = coef_3_1 - coef_2_1\n\nprint(f\"\\nResponse Rate Differences from Regression Coefficients:\")\nprint(f\"2:1 - 1:1 = {coef_2_1:.4f}\")\nprint(f\"3:1 - 2:1 = {diff_coef_3_1_vs_2_1:.4f}\")\n\nT-test: 1:1 vs 2:1 | t = nan, p = nan\nT-test: 2:1 vs 3:1 | t = -0.050, p = 0.9600\nT-test: 1:1 vs 3:1 | t = nan, p = nan\n\nRegression with dummy variables (1:1 omitted):\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                 -0.000\nMethod:                 Least Squares   F-statistic:                    0.6454\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):              0.524\nTime:                        15:00:38   Log-Likelihood:                 16688.\nNo. Observations:               33396   AIC:                        -3.337e+04\nDf Residuals:                   33393   BIC:                        -3.334e+04\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.0207      0.001     14.912      0.000       0.018       0.023\nratio2         0.0019      0.002      0.958      0.338      -0.002       0.006\nratio3         0.0020      0.002      1.008      0.313      -0.002       0.006\n==============================================================================\nOmnibus:                    38963.957   Durbin-Watson:                   1.995\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          2506478.937\nSkew:                           6.511   Prob(JB):                         0.00\nKurtosis:                      43.394   Cond. No.                         3.73\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\nRegression with categorical ratio variable:\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                 -0.000\nMethod:                 Least Squares   F-statistic:                    0.4263\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):              0.734\nTime:                        15:00:38   Log-Likelihood:                 16688.\nNo. Observations:               33396   AIC:                        -3.337e+04\nDf Residuals:                   33392   BIC:                        -3.333e+04\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n=================================================================================\n                    coef    std err          t      P&gt;|t|      [0.025      0.975]\n---------------------------------------------------------------------------------\nIntercept       1.23e+09   1.12e+10      0.110      0.912   -2.07e+10    2.32e+10\nC(ratio)[T.1]  -1.23e+09   1.12e+10     -0.110      0.912   -2.32e+10    2.07e+10\nC(ratio)[T.2]  -1.23e+09   1.12e+10     -0.110      0.912   -2.32e+10    2.07e+10\nC(ratio)[T.3]  -1.23e+09   1.12e+10     -0.110      0.912   -2.32e+10    2.07e+10\n==============================================================================\nOmnibus:                    38963.855   Durbin-Watson:                   1.995\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          2506451.717\nSkew:                           6.511   Prob(JB):                         0.00\nKurtosis:                      43.394   Cond. No.                     3.22e+13\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The smallest eigenvalue is 4.31e-23. This might indicate that there are\nstrong multicollinearity problems or that the design matrix is singular.\n\nResponse Rate Differences from Data:\n2:1 - 1:1 = nan\n3:1 - 2:1 = nan\n\nResponse Rate Differences from Regression Coefficients:\n2:1 - 1:1 = 0.0019\n3:1 - 2:1 = 0.0001\n\n\n\n\nSize of Charitable Contribution\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\ntodo: Calculate a t-test or run a bivariate linear regression of the donation amount on the treatment status. What do we learn from doing this analysis?\ntodo: now limit the data to just people who made a donation and repeat the previous analysis. This regression allows you to analyze how much respondents donate conditional on donating some positive amount. Interpret the regression coefficients – what did we learn? Does the treatment coefficient have a causal interpretation?\ntodo: Make two plot: one for the treatment group and one for the control. Each plot should be a histogram of the donation amounts only among people who donated. Add a red vertical bar or some other annotation to indicate the sample average for each plot."
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#effect-of-treatment-on-donation-amount",
    "href": "projects/HW1/hw1_questions.html#effect-of-treatment-on-donation-amount",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Effect of Treatment on Donation Amount",
    "text": "Effect of Treatment on Donation Amount\nWe explore whether being offered a matching grant affects: 1. How much people donate on average (unconditionally) 2. How much people donate among those who do give (conditionally) 3. The distribution of donations with annotated averages\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\n\n# Load dataset\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\n# --- Unconditional regression (all people) ---\nmodel_uncond = smf.ols(\"amount ~ treatment\", data=df).fit()\nprint(\"Unconditional OLS regression (donation amount on treatment):\")\nprint(model_uncond.summary())\n\n# --- Conditional regression (only among donors) ---\ndf_donors = df[df['gave'] == 1]\nmodel_cond = smf.ols(\"amount ~ treatment\", data=df_donors).fit()\nprint(\"\\nConditional OLS regression (amount | gave == 1):\")\nprint(model_cond.summary())\n\n# --- Interpretation prompt ---\nprint(\"\\nInterpretation:\")\nprint(\"- The unconditional regression includes everyone and reflects both intensive (amount) and extensive (whether they donated) margins.\")\nprint(\"- The conditional regression isolates only the intensive margin — how much donors gave once they decided to give.\")\nprint(\"- The treatment coefficient in the conditional regression does NOT have a direct causal interpretation; it's conditional on post-treatment behavior.\")\n\n# --- Histograms of donation amounts among donors, by treatment ---\ntreat_donors = df_donors[df_donors['treatment'] == 1]['amount']\ncontrol_donors = df_donors[df_donors['treatment'] == 0]['amount']\n\nplt.figure(figsize=(14, 6))\n\n# Control group\nplt.subplot(1, 2, 1)\nplt.hist(control_donors, bins=30, alpha=0.7, color='skyblue', edgecolor='black')\nplt.axvline(control_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Control Group: Donation Amounts (Among Donors)')\nplt.xlabel('Amount Donated')\nplt.ylabel('Frequency')\nplt.text(control_donors.mean(), plt.ylim()[1]*0.9, f\"Mean: {control_donors.mean():.2f}\", color='red')\n\n# Treatment group\nplt.subplot(1, 2, 2)\nplt.hist(treat_donors, bins=30, alpha=0.7, color='lightgreen', edgecolor='black')\nplt.axvline(treat_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Treatment Group: Donation Amounts (Among Donors)')\nplt.xlabel('Amount Donated')\nplt.ylabel('Frequency')\nplt.text(treat_donors.mean(), plt.ylim()[1]*0.9, f\"Mean: {treat_donors.mean():.2f}\", color='red')\n\nplt.tight_layout()\nplt.show()\n\nUnconditional OLS regression (donation amount on treatment):\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 amount   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                  0.000\nMethod:                 Least Squares   F-statistic:                     3.461\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):             0.0628\nTime:                        15:00:38   Log-Likelihood:            -1.7946e+05\nNo. Observations:               50083   AIC:                         3.589e+05\nDf Residuals:                   50081   BIC:                         3.589e+05\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.8133      0.067     12.063      0.000       0.681       0.945\ntreatment      0.1536      0.083      1.861      0.063      -0.008       0.315\n==============================================================================\nOmnibus:                    96861.113   Durbin-Watson:                   2.008\nProb(Omnibus):                  0.000   Jarque-Bera (JB):        240735713.635\nSkew:                          15.297   Prob(JB):                         0.00\nKurtosis:                     341.269   Cond. No.                         3.23\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\nConditional OLS regression (amount | gave == 1):\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 amount   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                 -0.001\nMethod:                 Least Squares   F-statistic:                    0.3374\nDate:                Wed, 23 Apr 2025   Prob (F-statistic):              0.561\nTime:                        15:00:38   Log-Likelihood:                -5326.8\nNo. Observations:                1034   AIC:                         1.066e+04\nDf Residuals:                    1032   BIC:                         1.067e+04\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     45.5403      2.423     18.792      0.000      40.785      50.296\ntreatment     -1.6684      2.872     -0.581      0.561      -7.305       3.968\n==============================================================================\nOmnibus:                      587.258   Durbin-Watson:                   2.031\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             5623.279\nSkew:                           2.464   Prob(JB):                         0.00\nKurtosis:                      13.307   Cond. No.                         3.49\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\nInterpretation:\n- The unconditional regression includes everyone and reflects both intensive (amount) and extensive (whether they donated) margins.\n- The conditional regression isolates only the intensive margin — how much donors gave once they decided to give.\n- The treatment coefficient in the conditional regression does NOT have a direct causal interpretation; it's conditional on post-treatment behavior."
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#simulated-cumulative-differences",
    "href": "projects/HW1/hw1_questions.html#simulated-cumulative-differences",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulated Cumulative Differences",
    "text": "Simulated Cumulative Differences\nTo simulate the intuition behind comparing group means, we draw: - 100,000 samples from the control group donation distribution - 10,000 samples from the treatment group We compute the difference between paired samples and plot the cumulative average of the differences.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load dataset\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\n# Use unconditional donation amount distributions\ncontrol_dist = df[df['treatment'] == 0]['amount']\ntreatment_dist = df[df['treatment'] == 1]['amount']\n\n# Simulate draws\nnp.random.seed(42)\nsim_control = np.random.choice(control_dist, size=100000, replace=True)\nsim_treat = np.random.choice(treatment_dist, size=10000, replace=True)\n\n# Match lengths for subtraction (repeat treatment sample)\nsim_treat_matched = np.tile(sim_treat, 10)  # Now length = 100000\n\n# Compute vector of differences\ndiffs = sim_treat_matched - sim_control\n\n# Compute cumulative average\ncumulative_avg = np.cumsum(diffs) / np.arange(1, len(diffs) + 1)\n\n# True difference in means\ntrue_diff = treatment_dist.mean() - control_dist.mean()\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(cumulative_avg, label='Cumulative Average of Differences')\nplt.axhline(true_diff, color='red', linestyle='--', linewidth=2, label='True Mean Difference')\nplt.xlabel('Number of Samples')\nplt.ylabel('Cumulative Average (Treatment - Control)')\nplt.title('Simulated Cumulative Average of Donation Differences')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Display true difference for interpretation\nprint(f\"\\nTrue difference in average donation amount (treatment - control): {true_diff:.4f}\")\n\n\n\n\n\n\n\n\n\nTrue difference in average donation amount (treatment - control): 0.1536\n\n\n\nCentral Limit Theorem\nto do: Make 4 histograms like those on slide 44 from our first class at sample sizes 50, 200, 500, and 1000 and explain these plots to the reader. To do this for a sample size of e.g. 50, take 50 draws from each of the control and treatment distributions, and calculate the average difference between those draws. Then repeat that process 999 more times so that you have 1000 averages. Plot the histogram of those averages. Comment on whether zero is in the “middle” of the distribution or whether it’s in the “tail.”"
  },
  {
    "objectID": "projects/HW1/hw1_questions.html#simulated-distribution-of-average-differences-at-varying-sample-sizes",
    "href": "projects/HW1/hw1_questions.html#simulated-distribution-of-average-differences-at-varying-sample-sizes",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulated Distribution of Average Differences at Varying Sample Sizes",
    "text": "Simulated Distribution of Average Differences at Varying Sample Sizes\nWe simulate 1000 experiments at each sample size (50, 200, 500, 1000). Each experiment: - Takes independent samples from control and treatment donation distributions - Computes the mean difference in donations We then plot histograms of these mean differences and observe whether zero falls near the center or in the tails.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load the dataset\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n\n# Extract full distributions\ncontrol = df[df['treatment'] == 0]['amount'].values\ntreatment = df[df['treatment'] == 1]['amount'].values\n\n# Sample sizes to simulate\nsample_sizes = [50, 200, 500, 1000]\nn_simulations = 1000\n\n# Prepare for plots\nfig, axs = plt.subplots(2, 2, figsize=(14, 10))\naxs = axs.flatten()\n\n# Run simulation and plotting loop\nnp.random.seed(123)\nfor i, n in enumerate(sample_sizes):\n    diff_means = []\n    for _ in range(n_simulations):\n        sample_control = np.random.choice(control, n, replace=True)\n        sample_treatment = np.random.choice(treatment, n, replace=True)\n        diff_means.append(sample_treatment.mean() - sample_control.mean())\n    \n    axs[i].hist(diff_means, bins=30, color='skyblue', edgecolor='black')\n    axs[i].axvline(0, color='red', linestyle='--', linewidth=2, label=\"Zero\")\n    axs[i].set_title(f\"Sample Size = {n}\")\n    axs[i].set_xlabel(\"Average Difference (Treatment - Control)\")\n    axs[i].set_ylabel(\"Frequency\")\n    axs[i].legend()\n\nplt.suptitle(\"Distributions of Average Differences from 1000 Simulated Experiments\")\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()"
  },
  {
    "objectID": "projects/HW2/Interactive-1.html",
    "href": "projects/HW2/Interactive-1.html",
    "title": "Nadifa's Awesome Work",
    "section": "",
    "text": "import pandas as pd\n\n# Read the blueprinty data\nblueprinty = pd.read_csv(\"blueprinty.csv\")\nblueprinty.head()\n\n\n_todo: Compare histograms and means of number of patents by customer status. What do you observe?_\n\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\n\n_todo: Compare regions and ages by customer status. What do you observe?_\n\n\n### Estimation of Simple Poisson Model\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\n\n_todo: Write down mathematically the likelihood for_ $Y \\sim \\text{Poisson}(\\lambda)$. Note that $f(Y|\\lambda) = e^{-\\lambda}\\lambda^Y/Y!$.\n\n_todo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_\n\n\nRunning cells with 'Python 3.12.3' requires the ipykernel package.\n\n&lt;a href='command:jupyter.createPythonEnvAndSelectController'&gt;Create a Python Environment&lt;/a&gt; with the required packages.\n\nOr install 'ipykernel' using the command: '/usr/bin/python3 -m pip install ipykernel -U --user --force-reinstall'\n\n\n\n\nimport pandas as pd\n\n# Read the blueprinty data\nblueprinty = pd.read_csv(\"blueprinty.csv\")\nblueprinty.head()\n\n\n_todo: Compare histograms and means of number of patents by customer status. What do you observe?_\n\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\n\n_todo: Compare regions and ages by customer status. What do you observe?_\n\n\n### Estimation of Simple Poisson Model\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\n\n_todo: Write down mathematically the likelihood for_ $Y \\sim \\text{Poisson}(\\lambda)$. Note that $f(Y|\\lambda) = e^{-\\lambda}\\lambda^Y/Y!$.\n\n_todo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_\n\n\nRunning cells with 'Python 3.12.3' requires the ipykernel package.\n\n&lt;a href='command:jupyter.createPythonEnvAndSelectController'&gt;Create a Python Environment&lt;/a&gt; with the required packages.\n\n\n\nConnected to base (Python 3.12.7)\n\nimport pandas as pd\n\n# Read the blueprinty data\nblueprinty = pd.read_csv(\"blueprinty.csv\")\nblueprinty.head()\n\n\n_todo: Compare histograms and means of number of patents by customer status. What do you observe?_\n\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\n\n_todo: Compare regions and ages by customer status. What do you observe?_\n\n\n### Estimation of Simple Poisson Model\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\n\n_todo: Write down mathematically the likelihood for_ $Y \\sim \\text{Poisson}(\\lambda)$. Note that $f(Y|\\lambda) = e^{-\\lambda}\\lambda^Y/Y!$.\n\n_todo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_\n\n\n  Cell In[1], line 8\n    _todo: Compare histograms and means of number of patents by customer status. What do you observe?_\n                   ^\nSyntaxError: invalid syntax\n\n\n\n\n\nimport pandas as pd\n\n# Read the blueprinty data\nblueprinty = pd.read_csv(\"blueprinty.csv\")\nblueprinty.head()\n\n\n_todo: Compare histograms and means of number of patents by customer status. What do you observe?_\n\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\n\n_todo: Compare regions and ages by customer status. What do you observe?_\n\n\n### Estimation of Simple Poisson Model\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\n\n_todo: Write down mathematically the likelihood for_ $Y \\sim \\text{Poisson}(\\lambda)$. Note that $f(Y|\\lambda) = e^{-\\lambda}\\lambda^Y/Y!$.\n\n_todo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_\n\n\n  Cell In[2], line 8\n    _todo: Compare histograms and means of number of patents by customer status. What do you observe?_\n                   ^\nSyntaxError: invalid syntax\n\n\n\n\n\nimport pandas as pd\n\n# Read the blueprinty data\nblueprinty = pd.read_csv(\"blueprinty.csv\")\nblueprinty.head()\n\n\n\n\n\n\n\n\npatents\nregion\nage\niscustomer\n\n\n\n\n0\n0\nMidwest\n32.5\n0\n\n\n1\n3\nSouthwest\n37.5\n0\n\n\n2\n4\nNorthwest\n27.0\n1\n\n\n3\n3\nNortheast\n24.5\n0\n\n\n4\n3\nSouthwest\n37.0\n0\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Check unique values for customer_status\nprint(\"Customer status values:\", blueprinty['customer_status'].unique())\n\n# Set up the figure\nplt.figure(figsize=(10, 8))\nsns.histplot(data=blueprinty, x=\"number_of_patents\", hue=\"customer_status\", kde=True, multiple=\"stack\")\nplt.title(\"Distribution of Number of Patents by Customer Status\")\nplt.xlabel(\"Number of Patents\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Compare means\nmeans = blueprinty.groupby(\"customer_status\")[\"number_of_patents\"].mean()\nprint(\"Mean number of patents by customer status:\")\nprint(means)\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nFile /opt/conda/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805, in Index.get_loc(self, key)\n   3804 try:\n-&gt; 3805     return self._engine.get_loc(casted_key)\n   3806 except KeyError as err:\n\nFile index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'customer_status'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError                                  Traceback (most recent call last)\nFile /home/jovyan/Desktop/mysite/projects/HW2/hw2_questions.qmd:5\n      2 import seaborn as sns\n      4 # Check unique values for customer_status\n----&gt; 5 print(\"Customer status values:\", blueprinty['customer_status'].unique())\n      7 # Set up the figure\n      8 plt.figure(figsize=(10, 8))\n\nFile /opt/conda/lib/python3.12/site-packages/pandas/core/frame.py:4102, in DataFrame.__getitem__(self, key)\n   4100 if self.columns.nlevels &gt; 1:\n   4101     return self._getitem_multilevel(key)\n-&gt; 4102 indexer = self.columns.get_loc(key)\n   4103 if is_integer(indexer):\n   4104     indexer = [indexer]\n\nFile /opt/conda/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812, in Index.get_loc(self, key)\n   3807     if isinstance(casted_key, slice) or (\n   3808         isinstance(casted_key, abc.Iterable)\n   3809         and any(isinstance(x, slice) for x in casted_key)\n   3810     ):\n   3811         raise InvalidIndexError(key)\n-&gt; 3812     raise KeyError(key) from err\n   3813 except TypeError:\n   3814     # If we have a listlike key, _check_indexing_error will raise\n   3815     #  InvalidIndexError. Otherwise we fall through and re-raise\n   3816     #  the TypeError.\n   3817     self._check_indexing_error(key)\n\nKeyError: 'customer_status'\n\n\n\n\nprint(blueprinty.columns.tolist())\n\n['patents', 'region', 'age', 'iscustomer']\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Check unique values for iscustomer\nprint(\"Customer status values:\", blueprinty['iscustomer'].unique())\n\n# Plot histogram\nplt.figure(figsize=(10, 8))\nsns.histplot(data=blueprinty, x=\"patents\", hue=\"iscustomer\", kde=True, multiple=\"stack\")\nplt.title(\"Distribution of Patents by Customer Status\")\nplt.xlabel(\"Number of Patents\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Compare means\nmeans = blueprinty.groupby(\"iscustomer\")[\"patents\"].mean()\nprint(\"Mean number of patents by customer status:\")\nprint(means)\n\nCustomer status values: [0 1]\n\n\n\n\n\n\n\n\n\nMean number of patents by customer status:\niscustomer\n0    3.473013\n1    4.133056\nName: patents, dtype: float64\n\n\n\n# Plot region counts by customer status\nplt.figure(figsize=(10, 8))\nsns.countplot(data=blueprinty, x=\"region\", hue=\"iscustomer\")\nplt.title(\"Region Distribution by Customer Status\")\nplt.xlabel(\"Region\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=45)\nplt.show()\n\n# Plot age distribution by customer status\nplt.figure(figsize=(10, 8))\nsns.boxplot(data=blueprinty, x=\"iscustomer\", y=\"age\")\nplt.title(\"Age Distribution by Customer Status\")\nplt.xlabel(\"Customer Status\")\nplt.ylabel(\"Age\")\nplt.show()\n\n# Compute mean ages by status\nmean_ages = blueprinty.groupby(\"iscustomer\")[\"age\"].mean()\nprint(\"Mean age by customer status:\")\nprint(mean_ages)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMean age by customer status:\niscustomer\n0    26.101570\n1    26.900208\nName: age, dtype: float64\n\n\n\nimport numpy as np\n\ndef poisson_loglikelihood(lmbda, Y):\n    \"\"\"\n    Compute the log-likelihood for Poisson-distributed data.\n\n    Parameters:\n    - lmbda: float, Poisson rate parameter λ\n    - Y: array-like, observed count data\n\n    Returns:\n    - float, log-likelihood value\n    \"\"\"\n    Y = np.array(Y)\n    if lmbda &lt;= 0:\n        return -np.inf  # log-likelihood undefined for non-positive lambda\n    log_lik = np.sum(-lmbda + Y * np.log(lmbda) - np.log(np.factorial(Y)))\n    return log_lik\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Use observed patents as Y\nY = blueprinty[\"patents\"].values\n\n# Define lambda values\nlambda_vals = np.linspace(0.1, 20, 200)\nloglik_vals = [poisson_loglikelihood(lmbda, Y) for lmbda in lambda_vals]\n\n# Plot log-likelihood\nplt.figure(figsize=(10, 8))\nplt.plot(lambda_vals, loglik_vals)\nplt.title(\"Poisson Log-Likelihood vs Lambda\")\nplt.xlabel(\"Lambda\")\nplt.ylabel(\"Log-Likelihood\")\nplt.grid(True)\nplt.show()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nFile /home/jovyan/Desktop/mysite/projects/HW2/hw2_questions.qmd:9\n      7 # Define lambda values\n      8 lambda_vals = np.linspace(0.1, 20, 200)\n----&gt; 9 loglik_vals = [poisson_loglikelihood(lmbda, Y) for lmbda in lambda_vals]\n     11 # Plot log-likelihood\n     12 plt.figure(figsize=(10, 8))\n\nCell In[8], line 17, in poisson_loglikelihood(lmbda, Y)\n     15 if lmbda &lt;= 0:\n     16     return -np.inf  # log-likelihood undefined for non-positive lambda\n---&gt; 17 log_lik = np.sum(-lmbda + Y * np.log(lmbda) - np.log(np.factorial(Y)))\n     18 return log_lik\n\nFile ~/.rsm-msba/lib/python3.12/site-packages/numpy/__init__.py:333, in __getattr__(attr)\n    330     \"Removed in NumPy 1.25.0\"\n    331     raise RuntimeError(\"Tester was removed in NumPy 1.25.\")\n--&gt; 333 raise AttributeError(\"module {!r} has no attribute \"\n    334                      \"{!r}\".format(__name__, attr))\n\nAttributeError: module 'numpy' has no attribute 'factorial'\n\n\n\n\nimport numpy as np\nfrom scipy.special import factorial\n\ndef poisson_loglikelihood(lmbda, Y):\n    \"\"\"\n    Compute the log-likelihood for Poisson-distributed data.\n\n    Parameters:\n    - lmbda: float, Poisson rate parameter λ\n    - Y: array-like, observed count data\n\n    Returns:\n    - float, log-likelihood value\n    \"\"\"\n    Y = np.array(Y)\n    if lmbda &lt;= 0:\n        return -np.inf  # log-likelihood undefined for non-positive lambda\n    log_lik = np.sum(-lmbda + Y * np.log(lmbda) - np.log(factorial(Y)))\n    return log_lik\n\n\nimport numpy as np\nfrom scipy.special import factorial\n\ndef poisson_loglikelihood(lmbda, Y):\n    \"\"\"\n    Compute the log-likelihood for Poisson-distributed data.\n\n    Parameters:\n    - lmbda: float, Poisson rate parameter λ\n    - Y: array-like, observed count data\n\n    Returns:\n    - float, log-likelihood value\n    \"\"\"\n    Y = np.array(Y)\n    if lmbda &lt;= 0:\n        return -np.inf  # log-likelihood undefined for non-positive lambda\n    log_lik = np.sum(-lmbda + Y * np.log(lmbda) - np.log(factorial(Y)))\n    return log_lik\n\n\n# Use the patent data\nY = blueprinty[\"patents\"].values\n\n# Range of lambda values\nlambda_vals = np.linspace(0.1, 20, 200)\nloglik_vals = [poisson_loglikelihood(lmbda, Y) for lmbda in lambda_vals]\n\n# Plot\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 8))\nplt.plot(lambda_vals, loglik_vals)\nplt.title(\"Poisson Log-Likelihood vs Lambda\")\nplt.xlabel(\"Lambda\")\nplt.ylabel(\"Log-Likelihood\")\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport sympy as sp\n\n# Define symbols\nlmbda, Y1, Y2, Y3 = sp.symbols(\"lambda Y1 Y2 Y3\", positive=True)\n\n# Example: 3 observations (you can generalize this)\nloglik = (-lmbda + Y1 * sp.log(lmbda)) + \\\n         (-lmbda + Y2 * sp.log(lmbda)) + \\\n         (-lmbda + Y3 * sp.log(lmbda))\n\n# Simplify\nloglik = sp.simplify(loglik)\n\n# Take derivative with respect to lambda\ndloglik = sp.diff(loglik, lmbda)\n\n# Solve derivative = 0\nlambda_mle = sp.solve(dloglik, lmbda)\nlambda_mle\n\n[Y1/3 + Y2/3 + Y3/3]\n\n\n\nfrom scipy.optimize import minimize_scalar\n\n# Negative log-likelihood\ndef neg_loglikelihood(lmbda):\n    return -poisson_loglikelihood(lmbda, Y)\n\n# Optimize (bounded to avoid λ ≤ 0)\nresult = minimize_scalar(neg_loglikelihood, bounds=(0.1, 20), method='bounded')\n\n# Output the estimated lambda\nlambda_mle = result.x\nlambda_mle\n\n3.6846666212929713\n\n\n\nimport numpy as np\n\ndef poisson_regression_loglikelihood(beta, Y, X):\n    \"\"\"\n    Log-likelihood for Poisson regression.\n\n    Parameters:\n    - beta: array-like, coefficients (shape: p,)\n    - Y: array-like, response variable (counts)\n    - X: array-like, design matrix (shape: n x p)\n\n    Returns:\n    - float, total log-likelihood\n    \"\"\"\n    beta = np.array(beta)\n    X = np.array(X)\n    Y = np.array(Y)\n\n    # Compute lambda_i = exp(X_i' * beta)\n    lambda_vals = np.exp(X @ beta)\n\n    # Log-likelihood\n    log_lik = np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n    return log_lik\n\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize\nfrom scipy.special import factorial\nfrom numpy.linalg import inv\n\n# 1. Build design matrix X\nblueprinty = blueprinty.copy()\nblueprinty[\"age_squared\"] = blueprinty[\"age\"] ** 2\n\n# Get dummies for region (drop one for reference)\nregion_dummies = pd.get_dummies(blueprinty[\"region\"], drop_first=True)\n\n# Combine features\nX = pd.concat([\n    pd.Series(1, index=blueprinty.index, name=\"intercept\"),\n    blueprinty[[\"age\", \"age_squared\", \"iscustomer\"]],\n    region_dummies\n], axis=1).astype(float)\n\nY = blueprinty[\"patents\"].values\nX_mat = X.values\n\n# 2. Define the negative log-likelihood\ndef neg_poisson_regression_loglikelihood(beta, Y, X):\n    beta = np.array(beta)\n    lambda_vals = np.exp(X @ beta)\n    return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n\n# 3. Optimize\ninit_beta = np.zeros(X.shape[1])\nresult = minimize(neg_poisson_regression_loglikelihood, init_beta, args=(Y, X_mat), method=\"BFGS\")\n\n# Estimated coefficients\nbeta_hat = result.x\n\n# 4. Get standard errors from Hessian\nhessian_inv = result.hess_inv\nse = np.sqrt(np.diag(hessian_inv))\n\n# 5. Create summary table\nsummary_table = pd.DataFrame({\n    \"Coefficient\": beta_hat,\n    \"Std. Error\": se\n}, index=X.columns)\n\nsummary_table\n\nRuntimeWarning: overflow encountered in exp\n  lambda_vals = np.exp(X @ beta)\n&lt;ipython-input-16-8f3525de8a6e&gt;:28: RuntimeWarning: invalid value encountered in multiply\n  return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n&lt;ipython-input-16-8f3525de8a6e&gt;:28: RuntimeWarning: invalid value encountered in add\n  return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n/home/jovyan/.rsm-msba/lib/python3.12/site-packages/numpy/core/fromnumeric.py:88: RuntimeWarning: overflow encountered in reduce\n  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n&lt;ipython-input-16-8f3525de8a6e&gt;:27: RuntimeWarning: overflow encountered in exp\n  lambda_vals = np.exp(X @ beta)\n&lt;ipython-input-16-8f3525de8a6e&gt;:28: RuntimeWarning: invalid value encountered in multiply\n  return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n&lt;ipython-input-16-8f3525de8a6e&gt;:28: RuntimeWarning: invalid value encountered in add\n  return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n/home/jovyan/.rsm-msba/lib/python3.12/site-packages/numpy/core/fromnumeric.py:88: RuntimeWarning: overflow encountered in reduce\n  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n&lt;ipython-input-16-8f3525de8a6e&gt;:27: RuntimeWarning: overflow encountered in exp\n  lambda_vals = np.exp(X @ beta)\n&lt;ipython-input-16-8f3525de8a6e&gt;:28: RuntimeWarning: invalid value encountered in multiply\n  return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n&lt;ipython-input-16-8f3525de8a6e&gt;:28: RuntimeWarning: invalid value encountered in add\n  return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n\n\n\n\n\n\n\n\n\nCoefficient\nStd. Error\n\n\n\n\nintercept\n1.480059\n1.0\n\n\nage\n38.016417\n1.0\n\n\nage_squared\n1033.539585\n1.0\n\n\niscustomer\n0.553874\n1.0\n\n\nNortheast\n0.640979\n1.0\n\n\nNorthwest\n0.164288\n1.0\n\n\nSouth\n0.181562\n1.0\n\n\nSouthwest\n0.295497\n1.0\n\n\n\n\n\n\n\n\nimport statsmodels.api as sm\n\n# Fit Poisson regression using statsmodels\nglm_model = sm.GLM(Y, X_mat, family=sm.families.Poisson())\nglm_results = glm_model.fit()\n\n# Print summary\nglm_results.summary()\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ny\nNo. Observations:\n1500\n\n\nModel:\nGLM\nDf Residuals:\n1492\n\n\nModel Family:\nPoisson\nDf Model:\n7\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-3258.1\n\n\nDate:\nTue, 06 May 2025\nDeviance:\n2143.3\n\n\nTime:\n13:35:11\nPearson chi2:\n2.07e+03\n\n\nNo. Iterations:\n5\nPseudo R-squ. (CS):\n0.1360\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n-0.5089\n0.183\n-2.778\n0.005\n-0.868\n-0.150\n\n\nx1\n0.1486\n0.014\n10.716\n0.000\n0.121\n0.176\n\n\nx2\n-0.0030\n0.000\n-11.513\n0.000\n-0.003\n-0.002\n\n\nx3\n0.2076\n0.031\n6.719\n0.000\n0.147\n0.268\n\n\nx4\n0.0292\n0.044\n0.669\n0.504\n-0.056\n0.115\n\n\nx5\n-0.0176\n0.054\n-0.327\n0.744\n-0.123\n0.088\n\n\nx6\n0.0566\n0.053\n1.074\n0.283\n-0.047\n0.160\n\n\nx7\n0.0506\n0.047\n1.072\n0.284\n-0.042\n0.143\n\n\n\n\n\n\n# Step 1: Create X_0 (iscustomer = 0) and X_1 (iscustomer = 1)\nX_0 = X.copy()\nX_1 = X.copy()\nX_0[\"iscustomer\"] = 0\nX_1[\"iscustomer\"] = 1\n\n# Step 2: Predict expected patent counts under each scenario\n# Get design matrices\nX_0_mat = X_0.values\nX_1_mat = X_1.values\n\n# Use fitted beta_hat from previous optimization or glm\nlambda_0 = np.exp(X_0_mat @ beta_hat)\nlambda_1 = np.exp(X_1_mat @ beta_hat)\n\n# Step 3: Compute average treatment effect (ATE)\ndiffs = lambda_1 - lambda_0\nate = np.mean(diffs)\nate\n\nRuntimeWarning: overflow encountered in exp\n  lambda_0 = np.exp(X_0_mat @ beta_hat)\n&lt;ipython-input-18-1a85489e9279&gt;:14: RuntimeWarning: overflow encountered in exp\n  lambda_1 = np.exp(X_1_mat @ beta_hat)\n&lt;ipython-input-18-1a85489e9279&gt;:17: RuntimeWarning: invalid value encountered in subtract\n  diffs = lambda_1 - lambda_0\n\n\nnan\n\n\n\n# Create counterfactual datasets\nX_0 = X.copy()\nX_1 = X.copy()\nX_0[\"iscustomer\"] = 0\nX_1[\"iscustomer\"] = 1\nX_0_mat = X_0.values\nX_1_mat = X_1.values\n\n# Predict expected patent counts\nlambda_0 = np.exp(X_0_mat @ beta_hat)\nlambda_1 = np.exp(X_1_mat @ beta_hat)\n\n# Compute average treatment effect\ndiffs = lambda_1 - lambda_0\nate = np.mean(diffs)\nate\n\nRuntimeWarning: overflow encountered in exp\n  lambda_0 = np.exp(X_0_mat @ beta_hat)\n&lt;ipython-input-19-93ab39b1dafe&gt;:11: RuntimeWarning: overflow encountered in exp\n  lambda_1 = np.exp(X_1_mat @ beta_hat)\n&lt;ipython-input-19-93ab39b1dafe&gt;:14: RuntimeWarning: invalid value encountered in subtract\n  diffs = lambda_1 - lambda_0\n\n\nnan\n\n\n\nimport pandas as pd\n\n# Load Airbnb data\nairbnb = pd.read_csv(\"airbnb.csv\")\n\n# Keep relevant columns\ncolumns_to_keep = [\n    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\", \"number_of_reviews\",\n    \"review_scores_cleanliness\", \"review_scores_location\",\n    \"review_scores_value\", \"instant_bookable\"\n]\n\nairbnb = airbnb[columns_to_keep]\n\n# Drop rows with missing values in these columns\nairbnb_clean = airbnb.dropna()\n\n# Convert instant_bookable to binary\nairbnb_clean[\"instant_bookable\"] = airbnb_clean[\"instant_bookable\"].map({\"t\": 1, \"f\": 0})\n\nSettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  airbnb_clean[\"instant_bookable\"] = airbnb_clean[\"instant_bookable\"].map({\"t\": 1, \"f\": 0})\n\n\n\nimport pandas as pd\n\n# Load Airbnb data\nairbnb = pd.read_csv(\"airbnb.csv\")\n\n# Keep relevant columns\ncolumns_to_keep = [\n    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\", \"number_of_reviews\",\n    \"review_scores_cleanliness\", \"review_scores_location\",\n    \"review_scores_value\", \"instant_bookable\"\n]\n\nairbnb = airbnb[columns_to_keep]\n\n# Drop rows with missing values in these columns\nairbnb_clean = airbnb.dropna()\n\n# Convert instant_bookable to binary\nairbnb_clean.loc[:, \"instant_bookable\"] = airbnb_clean[\"instant_bookable\"].map({\"t\": 1, \"f\": 0})\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(10, 8))\nsns.histplot(airbnb_clean[\"number_of_reviews\"], bins=50, kde=False)\nplt.title(\"Distribution of Number of Reviews\")\nplt.xlabel(\"Number of Reviews\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\nairbnb_clean.describe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbathrooms\nbedrooms\nprice\nnumber_of_reviews\nreview_scores_cleanliness\nreview_scores_location\nreview_scores_value\n\n\n\n\ncount\n30160.000000\n30160.000000\n30160.000000\n30160.000000\n30160.000000\n30160.000000\n30160.000000\n\n\nmean\n1.122132\n1.151459\n140.206863\n21.170889\n9.201724\n9.415351\n9.333952\n\n\nstd\n0.384916\n0.699010\n188.392314\n32.007541\n1.114261\n0.843185\n0.900472\n\n\nmin\n0.000000\n0.000000\n10.000000\n1.000000\n2.000000\n2.000000\n2.000000\n\n\n25%\n1.000000\n1.000000\n70.000000\n3.000000\n9.000000\n9.000000\n9.000000\n\n\n50%\n1.000000\n1.000000\n103.000000\n8.000000\n10.000000\n10.000000\n10.000000\n\n\n75%\n1.000000\n1.000000\n169.000000\n26.000000\n10.000000\n10.000000\n10.000000\n\n\nmax\n6.000000\n10.000000\n10000.000000\n421.000000\n10.000000\n10.000000\n10.000000\n\n\n\n\n\n\n\n\nimport numpy as np\nimport statsmodels.api as sm\n\n# Create dummy variables for room type (drop one)\nroom_dummies = pd.get_dummies(airbnb_clean[\"room_type\"], drop_first=True)\n\n# Build design matrix\nX = pd.concat([\n    pd.Series(1, index=airbnb_clean.index, name=\"intercept\"),\n    airbnb_clean[[\"bathrooms\", \"bedrooms\", \"price\",\n                  \"review_scores_cleanliness\", \"review_scores_location\",\n                  \"review_scores_value\", \"instant_bookable\"]],\n    room_dummies\n], axis=1)\n\nY = airbnb_clean[\"number_of_reviews\"]\n\n# Fit Poisson model\npoisson_model = sm.GLM(Y, X, family=sm.families.Poisson())\npoisson_results = poisson_model.fit()\npoisson_results.summary()\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nFile /home/jovyan/Desktop/mysite/projects/HW2/hw2_questions.qmd:19\n     16 Y = airbnb_clean[\"number_of_reviews\"]\n     18 # Fit Poisson model\n---&gt; 19 poisson_model = sm.GLM(Y, X, family=sm.families.Poisson())\n     20 poisson_results = poisson_model.fit()\n     21 poisson_results.summary()\n\nFile /opt/conda/lib/python3.12/site-packages/statsmodels/genmod/generalized_linear_model.py:326, in GLM.__init__(self, endog, exog, family, offset, exposure, freq_weights, var_weights, missing, **kwargs)\n    323 self.freq_weights = freq_weights\n    324 self.var_weights = var_weights\n--&gt; 326 super().__init__(endog, exog, missing=missing,\n    327                           offset=offset, exposure=exposure,\n    328                           freq_weights=freq_weights,\n    329                           var_weights=var_weights, **kwargs)\n    330 self._check_inputs(family, self.offset, self.exposure, self.endog,\n    331                    self.freq_weights, self.var_weights)\n    332 if offset is None:\n\nFile /opt/conda/lib/python3.12/site-packages/statsmodels/base/model.py:270, in LikelihoodModel.__init__(self, endog, exog, **kwargs)\n    269 def __init__(self, endog, exog=None, **kwargs):\n--&gt; 270     super().__init__(endog, exog, **kwargs)\n    271     self.initialize()\n\nFile /opt/conda/lib/python3.12/site-packages/statsmodels/base/model.py:95, in Model.__init__(self, endog, exog, **kwargs)\n     93 missing = kwargs.pop('missing', 'none')\n     94 hasconst = kwargs.pop('hasconst', None)\n---&gt; 95 self.data = self._handle_data(endog, exog, missing, hasconst,\n     96                               **kwargs)\n     97 self.k_constant = self.data.k_constant\n     98 self.exog = self.data.exog\n\nFile /opt/conda/lib/python3.12/site-packages/statsmodels/base/model.py:135, in Model._handle_data(self, endog, exog, missing, hasconst, **kwargs)\n    134 def _handle_data(self, endog, exog, missing, hasconst, **kwargs):\n--&gt; 135     data = handle_data(endog, exog, missing, hasconst, **kwargs)\n    136     # kwargs arrays could have changed, easier to just attach here\n    137     for key in kwargs:\n\nFile /opt/conda/lib/python3.12/site-packages/statsmodels/base/data.py:675, in handle_data(endog, exog, missing, hasconst, **kwargs)\n    672     exog = np.asarray(exog)\n    674 klass = handle_data_class_factory(endog, exog)\n--&gt; 675 return klass(endog, exog=exog, missing=missing, hasconst=hasconst,\n    676              **kwargs)\n\nFile /opt/conda/lib/python3.12/site-packages/statsmodels/base/data.py:84, in ModelData.__init__(self, endog, exog, missing, hasconst, **kwargs)\n     82     self.orig_endog = endog\n     83     self.orig_exog = exog\n---&gt; 84     self.endog, self.exog = self._convert_endog_exog(endog, exog)\n     86 self.const_idx = None\n     87 self.k_constant = 0\n\nFile /opt/conda/lib/python3.12/site-packages/statsmodels/base/data.py:509, in PandasData._convert_endog_exog(self, endog, exog)\n    507 exog = exog if exog is None else np.asarray(exog)\n    508 if endog.dtype == object or exog is not None and exog.dtype == object:\n--&gt; 509     raise ValueError(\"Pandas data cast to numpy dtype of object. \"\n    510                      \"Check input data with np.asarray(data).\")\n    511 return super()._convert_endog_exog(endog, exog)\n\nValueError: Pandas data cast to numpy dtype of object. Check input data with np.asarray(data)."
  },
  {
    "objectID": "projects/HW2/hw2_questions.html",
    "href": "projects/HW2/hw2_questions.html",
    "title": "Poisson Regression Examples",
    "section": "",
    "text": "Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty’s software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty’s software and after using it. Unfortunately, such data is not available.\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm’s number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty’s software. The marketing team would like to use this data to make the claim that firms using Blueprinty’s software are more successful in getting their patent applications approved.\n\n\n\n\nimport pandas as pd\n\n# Read the blueprinty data\nblueprinty = pd.read_csv(\"blueprinty.csv\")\nblueprinty.head()\n\n\n\n\n\n\n\n\npatents\nregion\nage\niscustomer\n\n\n\n\n0\n0\nMidwest\n32.5\n0\n\n\n1\n3\nSouthwest\n37.5\n0\n\n\n2\n4\nNorthwest\n27.0\n1\n\n\n3\n3\nNortheast\n24.5\n0\n\n\n4\n3\nSouthwest\n37.0\n0\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Check unique values for iscustomer\nprint(\"Customer status values:\", blueprinty['iscustomer'].unique())\n\n# Plot histogram\nplt.figure(figsize=(10, 8))\nsns.histplot(data=blueprinty, x=\"patents\", hue=\"iscustomer\", kde=True, multiple=\"stack\")\nplt.title(\"Distribution of Patents by Customer Status\")\nplt.xlabel(\"Number of Patents\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Compare means\nmeans = blueprinty.groupby(\"iscustomer\")[\"patents\"].mean()\nprint(\"Mean number of patents by customer status:\")\nprint(means)\n\nCustomer status values: [0 1]\n\n\n\n\n\n\n\n\n\nMean number of patents by customer status:\niscustomer\n0    3.473013\n1    4.133056\nName: patents, dtype: float64\n\n\n\n\n\n\nPlots overlapping histograms of number_of_patents by customer_status.\nComputes and prints the mean number_of_patents for each group.\n\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\n\n# Plot region counts by customer status\nplt.figure(figsize=(10, 8))\nsns.countplot(data=blueprinty, x=\"region\", hue=\"iscustomer\")\nplt.title(\"Region Distribution by Customer Status\")\nplt.xlabel(\"Region\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=45)\nplt.show()\n\n# Plot age distribution by customer status\nplt.figure(figsize=(10, 8))\nsns.boxplot(data=blueprinty, x=\"iscustomer\", y=\"age\")\nplt.title(\"Age Distribution by Customer Status\")\nplt.xlabel(\"Customer Status\")\nplt.ylabel(\"Age\")\nplt.show()\n\n# Compute mean ages by status\nmean_ages = blueprinty.groupby(\"iscustomer\")[\"age\"].mean()\nprint(\"Mean age by customer status:\")\nprint(mean_ages)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMean age by customer status:\niscustomer\n0    26.101570\n1    26.900208\nName: age, dtype: float64\n\n\n\n\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\n\n\nLet ( Y_1, Y_2, , Y_n ) be independent observations, each distributed as ( Y_i () ).\nThe probability mass function of the Poisson distribution is:\n[ f(Y_i|) = ]\nThe likelihood function for ( n ) observations is:\n[ L(; Y_1, , Y_n) = _{i=1}^{n} = e^{-n} {{i=1}^{n} Y_i} {i=1}{n} ]\nThe log-likelihood is:\n[ L() = -n+ ({i=1}^{n} Y_i) - {i=1}^{n} Y_i! ]\n\n\n\nimport numpy as np\nfrom scipy.special import gammaln\n\ndef poisson_loglikelihood(lambd, Y):\n    \"\"\"\n    Compute the log-likelihood of observing data Y under a Poisson model with rate lambda.\n\n    Parameters:\n    - lambd: float, rate parameter (λ) of the Poisson distribution\n    - Y: array-like, observed data\n\n    Returns:\n    - float, the log-likelihood value\n    \"\"\"\n    Y = np.array(Y)\n    if lambd &lt;= 0:\n        return -np.inf  # log-likelihood is undefined for λ ≤ 0\n    return np.sum(Y * np.log(lambd) - lambd - gammaln(Y + 1))\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the dataset\ndf = pd.read_csv(\"blueprinty.csv\")\n\n# Assume the observed count variable is named 'patents'\nY = df['patents'].dropna()\n\n# Range of lambda values to test\nlambda_vals = np.linspace(0.1, 20, 200)\nlog_likelihood_vals = [poisson_loglikelihood(lamb, Y) for lamb in lambda_vals]\n\n# Plot\nplt.figure(figsize=(10, 8))\nplt.plot(lambda_vals, log_likelihood_vals)\nplt.title(\"Log-Likelihood of Poisson Model\")\nplt.xlabel(\"Lambda (λ)\")\nplt.ylabel(\"Log-Likelihood\")\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport sympy as sp\n\n# Define symbols\nlmbda, Y1, Y2, Y3 = sp.symbols(\"lambda Y1 Y2 Y3\", positive=True)\n\n# Example: 3 observations (you can generalize this)\nloglik = (-lmbda + Y1 * sp.log(lmbda)) + \\\n         (-lmbda + Y2 * sp.log(lmbda)) + \\\n         (-lmbda + Y3 * sp.log(lmbda))\n\n# Simplify\nloglik = sp.simplify(loglik)\n\n# Take derivative with respect to lambda\ndloglik = sp.diff(loglik, lmbda)\n\n# Solve derivative = 0\nlambda_mle = sp.solve(dloglik, lmbda)\nlambda_mle\n\n[Y1/3 + Y2/3 + Y3/3]\n\n\n\nfrom scipy.optimize import minimize_scalar\n\n# Negative log-likelihood\ndef neg_loglikelihood(lmbda):\n    return -poisson_loglikelihood(lmbda, Y)\n\n# Optimize (bounded to avoid λ ≤ 0)\nresult = minimize_scalar(neg_loglikelihood, bounds=(0.1, 20), method='bounded')\n\n# Output the estimated lambda\nlambda_mle = result.x\nlambda_mle\n\n3.6846666212929713\n\n\n\n\n\nNext, we extend our simple Poisson model to a Poisson Regression Model such that \\(Y_i = \\text{Poisson}(\\lambda_i)\\) where \\(\\lambda_i = \\exp(X_i'\\beta)\\). The interpretation is that the success rate of patent awards is not constant across all firms (\\(\\lambda\\)) but rather is a function of firm characteristics \\(X_i\\). Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.\n\nimport numpy as np\n\ndef poisson_regression_loglikelihood(beta, Y, X):\n    \"\"\"\n    Log-likelihood for Poisson regression.\n\n    Parameters:\n    - beta: array-like, coefficients (shape: p,)\n    - Y: array-like, response variable (counts)\n    - X: array-like, design matrix (shape: n x p)\n\n    Returns:\n    - float, total log-likelihood\n    \"\"\"\n    beta = np.array(beta)\n    X = np.array(X)\n    Y = np.array(Y)\n\n    # Compute lambda_i = exp(X_i' * beta)\n    lambda_vals = np.exp(X @ beta)\n\n    # Log-likelihood\n    log_lik = np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n    return log_lik\n\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize\nfrom scipy.special import factorial\nfrom numpy.linalg import inv\n\n# 1. Build design matrix X\nblueprinty = blueprinty.copy()\nblueprinty[\"age_squared\"] = blueprinty[\"age\"] ** 2\n\n# Get dummies for region (drop one for reference)\nregion_dummies = pd.get_dummies(blueprinty[\"region\"], drop_first=True)\n\n# Combine features\nX = pd.concat([\n    pd.Series(1, index=blueprinty.index, name=\"intercept\"),\n    blueprinty[[\"age\", \"age_squared\", \"iscustomer\"]],\n    region_dummies\n], axis=1).astype(float)\n\nY = blueprinty[\"patents\"].values\nX_mat = X.values\n\n# 2. Define the negative log-likelihood\ndef neg_poisson_regression_loglikelihood(beta, Y, X):\n    beta = np.array(beta)\n    lambda_vals = np.exp(X @ beta)\n    return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n\n# 3. Optimize\ninit_beta = np.zeros(X.shape[1])\nresult = minimize(neg_poisson_regression_loglikelihood, init_beta, args=(Y, X_mat), method=\"BFGS\")\n\n# Estimated coefficients\nbeta_hat = result.x\n\n# 4. Get standard errors from Hessian\nhessian_inv = result.hess_inv\nse = np.sqrt(np.diag(hessian_inv))\n\n# 5. Create summary table\nsummary_table = pd.DataFrame({\n    \"Coefficient\": beta_hat,\n    \"Std. Error\": se\n}, index=X.columns)\n\nsummary_table\n\n\n\n\n\n\n\n\nCoefficient\nStd. Error\n\n\n\n\nintercept\n1.480059\n1.0\n\n\nage\n38.016417\n1.0\n\n\nage_squared\n1033.539585\n1.0\n\n\niscustomer\n0.553874\n1.0\n\n\nNortheast\n0.640979\n1.0\n\n\nNorthwest\n0.164288\n1.0\n\n\nSouth\n0.181562\n1.0\n\n\nSouthwest\n0.295497\n1.0\n\n\n\n\n\n\n\n\nimport statsmodels.api as sm\n\n# Fit Poisson regression using statsmodels\nglm_model = sm.GLM(Y, X_mat, family=sm.families.Poisson())\nglm_results = glm_model.fit()\n\n# Print summary\nglm_results.summary()\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ny\nNo. Observations:\n1500\n\n\nModel:\nGLM\nDf Residuals:\n1492\n\n\nModel Family:\nPoisson\nDf Model:\n7\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-3258.1\n\n\nDate:\nWed, 07 May 2025\nDeviance:\n2143.3\n\n\nTime:\n20:47:19\nPearson chi2:\n2.07e+03\n\n\nNo. Iterations:\n5\nPseudo R-squ. (CS):\n0.1360\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n-0.5089\n0.183\n-2.778\n0.005\n-0.868\n-0.150\n\n\nx1\n0.1486\n0.014\n10.716\n0.000\n0.121\n0.176\n\n\nx2\n-0.0030\n0.000\n-11.513\n0.000\n-0.003\n-0.002\n\n\nx3\n0.2076\n0.031\n6.719\n0.000\n0.147\n0.268\n\n\nx4\n0.0292\n0.044\n0.669\n0.504\n-0.056\n0.115\n\n\nx5\n-0.0176\n0.054\n-0.327\n0.744\n-0.123\n0.088\n\n\nx6\n0.0566\n0.053\n1.074\n0.283\n-0.047\n0.160\n\n\nx7\n0.0506\n0.047\n1.072\n0.284\n-0.042\n0.143"
  },
  {
    "objectID": "projects/HW2/hw2_questions.html#blueprinty-case-study",
    "href": "projects/HW2/hw2_questions.html#blueprinty-case-study",
    "title": "Poisson Regression Examples",
    "section": "",
    "text": "Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty’s software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty’s software and after using it. Unfortunately, such data is not available.\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm’s number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty’s software. The marketing team would like to use this data to make the claim that firms using Blueprinty’s software are more successful in getting their patent applications approved.\n\n\n\n\nimport pandas as pd\n\n# Read the blueprinty data\nblueprinty = pd.read_csv(\"blueprinty.csv\")\nblueprinty.head()\n\n\n\n\n\n\n\n\npatents\nregion\nage\niscustomer\n\n\n\n\n0\n0\nMidwest\n32.5\n0\n\n\n1\n3\nSouthwest\n37.5\n0\n\n\n2\n4\nNorthwest\n27.0\n1\n\n\n3\n3\nNortheast\n24.5\n0\n\n\n4\n3\nSouthwest\n37.0\n0\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Check unique values for iscustomer\nprint(\"Customer status values:\", blueprinty['iscustomer'].unique())\n\n# Plot histogram\nplt.figure(figsize=(10, 8))\nsns.histplot(data=blueprinty, x=\"patents\", hue=\"iscustomer\", kde=True, multiple=\"stack\")\nplt.title(\"Distribution of Patents by Customer Status\")\nplt.xlabel(\"Number of Patents\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Compare means\nmeans = blueprinty.groupby(\"iscustomer\")[\"patents\"].mean()\nprint(\"Mean number of patents by customer status:\")\nprint(means)\n\nCustomer status values: [0 1]\n\n\n\n\n\n\n\n\n\nMean number of patents by customer status:\niscustomer\n0    3.473013\n1    4.133056\nName: patents, dtype: float64\n\n\n\n\n\n\nPlots overlapping histograms of number_of_patents by customer_status.\nComputes and prints the mean number_of_patents for each group.\n\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\n\n# Plot region counts by customer status\nplt.figure(figsize=(10, 8))\nsns.countplot(data=blueprinty, x=\"region\", hue=\"iscustomer\")\nplt.title(\"Region Distribution by Customer Status\")\nplt.xlabel(\"Region\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=45)\nplt.show()\n\n# Plot age distribution by customer status\nplt.figure(figsize=(10, 8))\nsns.boxplot(data=blueprinty, x=\"iscustomer\", y=\"age\")\nplt.title(\"Age Distribution by Customer Status\")\nplt.xlabel(\"Customer Status\")\nplt.ylabel(\"Age\")\nplt.show()\n\n# Compute mean ages by status\nmean_ages = blueprinty.groupby(\"iscustomer\")[\"age\"].mean()\nprint(\"Mean age by customer status:\")\nprint(mean_ages)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMean age by customer status:\niscustomer\n0    26.101570\n1    26.900208\nName: age, dtype: float64\n\n\n\n\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\n\n\nLet ( Y_1, Y_2, , Y_n ) be independent observations, each distributed as ( Y_i () ).\nThe probability mass function of the Poisson distribution is:\n[ f(Y_i|) = ]\nThe likelihood function for ( n ) observations is:\n[ L(; Y_1, , Y_n) = _{i=1}^{n} = e^{-n} {{i=1}^{n} Y_i} {i=1}{n} ]\nThe log-likelihood is:\n[ L() = -n+ ({i=1}^{n} Y_i) - {i=1}^{n} Y_i! ]\n\n\n\nimport numpy as np\nfrom scipy.special import gammaln\n\ndef poisson_loglikelihood(lambd, Y):\n    \"\"\"\n    Compute the log-likelihood of observing data Y under a Poisson model with rate lambda.\n\n    Parameters:\n    - lambd: float, rate parameter (λ) of the Poisson distribution\n    - Y: array-like, observed data\n\n    Returns:\n    - float, the log-likelihood value\n    \"\"\"\n    Y = np.array(Y)\n    if lambd &lt;= 0:\n        return -np.inf  # log-likelihood is undefined for λ ≤ 0\n    return np.sum(Y * np.log(lambd) - lambd - gammaln(Y + 1))\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the dataset\ndf = pd.read_csv(\"blueprinty.csv\")\n\n# Assume the observed count variable is named 'patents'\nY = df['patents'].dropna()\n\n# Range of lambda values to test\nlambda_vals = np.linspace(0.1, 20, 200)\nlog_likelihood_vals = [poisson_loglikelihood(lamb, Y) for lamb in lambda_vals]\n\n# Plot\nplt.figure(figsize=(10, 8))\nplt.plot(lambda_vals, log_likelihood_vals)\nplt.title(\"Log-Likelihood of Poisson Model\")\nplt.xlabel(\"Lambda (λ)\")\nplt.ylabel(\"Log-Likelihood\")\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport sympy as sp\n\n# Define symbols\nlmbda, Y1, Y2, Y3 = sp.symbols(\"lambda Y1 Y2 Y3\", positive=True)\n\n# Example: 3 observations (you can generalize this)\nloglik = (-lmbda + Y1 * sp.log(lmbda)) + \\\n         (-lmbda + Y2 * sp.log(lmbda)) + \\\n         (-lmbda + Y3 * sp.log(lmbda))\n\n# Simplify\nloglik = sp.simplify(loglik)\n\n# Take derivative with respect to lambda\ndloglik = sp.diff(loglik, lmbda)\n\n# Solve derivative = 0\nlambda_mle = sp.solve(dloglik, lmbda)\nlambda_mle\n\n[Y1/3 + Y2/3 + Y3/3]\n\n\n\nfrom scipy.optimize import minimize_scalar\n\n# Negative log-likelihood\ndef neg_loglikelihood(lmbda):\n    return -poisson_loglikelihood(lmbda, Y)\n\n# Optimize (bounded to avoid λ ≤ 0)\nresult = minimize_scalar(neg_loglikelihood, bounds=(0.1, 20), method='bounded')\n\n# Output the estimated lambda\nlambda_mle = result.x\nlambda_mle\n\n3.6846666212929713\n\n\n\n\n\nNext, we extend our simple Poisson model to a Poisson Regression Model such that \\(Y_i = \\text{Poisson}(\\lambda_i)\\) where \\(\\lambda_i = \\exp(X_i'\\beta)\\). The interpretation is that the success rate of patent awards is not constant across all firms (\\(\\lambda\\)) but rather is a function of firm characteristics \\(X_i\\). Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.\n\nimport numpy as np\n\ndef poisson_regression_loglikelihood(beta, Y, X):\n    \"\"\"\n    Log-likelihood for Poisson regression.\n\n    Parameters:\n    - beta: array-like, coefficients (shape: p,)\n    - Y: array-like, response variable (counts)\n    - X: array-like, design matrix (shape: n x p)\n\n    Returns:\n    - float, total log-likelihood\n    \"\"\"\n    beta = np.array(beta)\n    X = np.array(X)\n    Y = np.array(Y)\n\n    # Compute lambda_i = exp(X_i' * beta)\n    lambda_vals = np.exp(X @ beta)\n\n    # Log-likelihood\n    log_lik = np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n    return log_lik\n\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize\nfrom scipy.special import factorial\nfrom numpy.linalg import inv\n\n# 1. Build design matrix X\nblueprinty = blueprinty.copy()\nblueprinty[\"age_squared\"] = blueprinty[\"age\"] ** 2\n\n# Get dummies for region (drop one for reference)\nregion_dummies = pd.get_dummies(blueprinty[\"region\"], drop_first=True)\n\n# Combine features\nX = pd.concat([\n    pd.Series(1, index=blueprinty.index, name=\"intercept\"),\n    blueprinty[[\"age\", \"age_squared\", \"iscustomer\"]],\n    region_dummies\n], axis=1).astype(float)\n\nY = blueprinty[\"patents\"].values\nX_mat = X.values\n\n# 2. Define the negative log-likelihood\ndef neg_poisson_regression_loglikelihood(beta, Y, X):\n    beta = np.array(beta)\n    lambda_vals = np.exp(X @ beta)\n    return -np.sum(-lambda_vals + Y * np.log(lambda_vals) - np.log(factorial(Y)))\n\n# 3. Optimize\ninit_beta = np.zeros(X.shape[1])\nresult = minimize(neg_poisson_regression_loglikelihood, init_beta, args=(Y, X_mat), method=\"BFGS\")\n\n# Estimated coefficients\nbeta_hat = result.x\n\n# 4. Get standard errors from Hessian\nhessian_inv = result.hess_inv\nse = np.sqrt(np.diag(hessian_inv))\n\n# 5. Create summary table\nsummary_table = pd.DataFrame({\n    \"Coefficient\": beta_hat,\n    \"Std. Error\": se\n}, index=X.columns)\n\nsummary_table\n\n\n\n\n\n\n\n\nCoefficient\nStd. Error\n\n\n\n\nintercept\n1.480059\n1.0\n\n\nage\n38.016417\n1.0\n\n\nage_squared\n1033.539585\n1.0\n\n\niscustomer\n0.553874\n1.0\n\n\nNortheast\n0.640979\n1.0\n\n\nNorthwest\n0.164288\n1.0\n\n\nSouth\n0.181562\n1.0\n\n\nSouthwest\n0.295497\n1.0\n\n\n\n\n\n\n\n\nimport statsmodels.api as sm\n\n# Fit Poisson regression using statsmodels\nglm_model = sm.GLM(Y, X_mat, family=sm.families.Poisson())\nglm_results = glm_model.fit()\n\n# Print summary\nglm_results.summary()\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\ny\nNo. Observations:\n1500\n\n\nModel:\nGLM\nDf Residuals:\n1492\n\n\nModel Family:\nPoisson\nDf Model:\n7\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-3258.1\n\n\nDate:\nWed, 07 May 2025\nDeviance:\n2143.3\n\n\nTime:\n20:47:19\nPearson chi2:\n2.07e+03\n\n\nNo. Iterations:\n5\nPseudo R-squ. (CS):\n0.1360\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n-0.5089\n0.183\n-2.778\n0.005\n-0.868\n-0.150\n\n\nx1\n0.1486\n0.014\n10.716\n0.000\n0.121\n0.176\n\n\nx2\n-0.0030\n0.000\n-11.513\n0.000\n-0.003\n-0.002\n\n\nx3\n0.2076\n0.031\n6.719\n0.000\n0.147\n0.268\n\n\nx4\n0.0292\n0.044\n0.669\n0.504\n-0.056\n0.115\n\n\nx5\n-0.0176\n0.054\n-0.327\n0.744\n-0.123\n0.088\n\n\nx6\n0.0566\n0.053\n1.074\n0.283\n-0.047\n0.160\n\n\nx7\n0.0506\n0.047\n1.072\n0.284\n-0.042\n0.143"
  },
  {
    "objectID": "projects/HW2/hw2_questions.html#interpretation-of-poisson-regression-results",
    "href": "projects/HW2/hw2_questions.html#interpretation-of-poisson-regression-results",
    "title": "Poisson Regression Examples",
    "section": "Interpretation of Poisson Regression Results",
    "text": "Interpretation of Poisson Regression Results\nWe fit a Poisson regression model to predict the number of patents using age, customer status, and region.\n\nSummary of Results\n\nModel type: GLM (Poisson family with log link)\nSample size: 1500 observations\nPseudo R² (Cragg & Uhler’s): 0.136 — the model explains about 13.6% of the deviance\n\n\n\nCoefficients and Interpretation\n\n\n\n\n\n\n\n\n\n\nVariable\nCoefficient\nStd. Error\np-value\nInterpretation\n\n\n\n\nIntercept\n-0.509\n0.183\n0.005\nBaseline log-count of patents; significant\n\n\nAge\n0.149\n0.014\n&lt;0.001\nPositive effect on patent count\n\n\nAge²\n-0.003\n~0.000\n&lt;0.001\nNegative effect; implies diminishing returns with age\n\n\nIs Customer\n0.208\n0.031\n&lt;0.001\nCustomers have ~23% more patents (exp(0.208))\n\n\nRegion dummies\nSmall, non-significant coefficients\n&gt; 0.2\nNot significant\nNo strong regional effect\n\n\n\n\n\nKey Observations\n\nAge is a significant predictor, but due to the negative squared term, the relationship is inverted U-shaped.\nCustomer status has a strong positive effect on patent count.\nRegion variables are not statistically significant, suggesting no major geographic difference in patenting when other variables are controlled for.\n\nThese results align with the MLE estimation performed earlier and validate the implementation."
  },
  {
    "objectID": "projects/HW2/hw2_questions.html#effect-of-blueprintys-software-on-patent-success",
    "href": "projects/HW2/hw2_questions.html#effect-of-blueprintys-software-on-patent-success",
    "title": "Poisson Regression Examples",
    "section": "Effect of Blueprinty’s Software on Patent Success",
    "text": "Effect of Blueprinty’s Software on Patent Success\nWe simulate the effect of becoming a customer using counterfactual prediction. We create two versions of the design matrix:\n\nX_0: where all firms are treated as non-customers (iscustomer = 0)\nX_1: where all firms are treated as customers (iscustomer = 1)\n\nWe use the fitted Poisson regression model to compute predicted patent counts for each firm under both conditions and compute the average treatment effect (ATE) as the difference.\n\nimport statsmodels.api as sm\n\n# Load the dataset\ndf = pd.read_csv(\"blueprinty.csv\")\n\n# Drop missing values\ndf = df.dropna(subset=['patents', 'iscustomer'])\n\n# Define outcome and features\nY = df['patents']\nX = df[['iscustomer']]  # Add more covariates if needed\n\n# Add intercept\nX = sm.add_constant(X)\n\n# Fit Poisson regression\npoisson_model = sm.GLM(Y, X, family=sm.families.Poisson()).fit()\n\n# Create X_0 and X_1\nX_0 = X.copy()\nX_0['iscustomer'] = 0\n\nX_1 = X.copy()\nX_1['iscustomer'] = 1\n\n# Predict\ny_pred_0 = poisson_model.predict(X_0)\ny_pred_1 = poisson_model.predict(X_1)\n\n# Calculate average treatment effect\naverage_effect = (y_pred_1 - y_pred_0).mean()\naverage_effect\n\n0.6600433754518399"
  },
  {
    "objectID": "projects/HW2/hw2_questions.html#airbnb-case-study",
    "href": "projects/HW2/hw2_questions.html#airbnb-case-study",
    "title": "Poisson Regression Examples",
    "section": "AirBnB Case Study",
    "text": "AirBnB Case Study\n\nIntroduction\nAirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City. The data include the following variables:\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n- `id` = unique ID number for each unit\n- `last_scraped` = date when information scraped\n- `host_since` = date when host first listed the unit on Airbnb\n- `days` = `last_scraped` - `host_since` = number of days the unit has been listed\n- `room_type` = Entire home/apt., Private room, or Shared room\n- `bathrooms` = number of bathrooms\n- `bedrooms` = number of bedrooms\n- `price` = price per night (dollars)\n- `number_of_reviews` = number of reviews for the unit on Airbnb\n- `review_scores_cleanliness` = a cleanliness score from reviews (1-10)\n- `review_scores_location` = a \"quality of location\" score from reviews (1-10)\n- `review_scores_value` = a \"quality of value\" score from reviews (1-10)\n- `instant_bookable` = \"t\" if instantly bookable, \"f\" if not"
  },
  {
    "objectID": "projects/HW2/hw2_questions.html#airbnb-modeling-the-number-of-reviews-as-a-proxy-for-bookings",
    "href": "projects/HW2/hw2_questions.html#airbnb-modeling-the-number-of-reviews-as-a-proxy-for-bookings",
    "title": "Poisson Regression Examples",
    "section": "Airbnb: Modeling the Number of Reviews as a Proxy for Bookings",
    "text": "Airbnb: Modeling the Number of Reviews as a Proxy for Bookings\nWe use the number of reviews as a proxy for the number of bookings. Below, we conduct EDA, handle missing values, and fit a Poisson regression to model the number of reviews.\n\n\nStep 1: Load and Clean the Data\n\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv(\"airbnb.csv\")\n\n# Preview the data\ndf.head()\n\n\n\n\n\n\n\n\nUnnamed: 0\nid\ndays\nlast_scraped\nhost_since\nroom_type\nbathrooms\nbedrooms\nprice\nnumber_of_reviews\nreview_scores_cleanliness\nreview_scores_location\nreview_scores_value\ninstant_bookable\n\n\n\n\n0\n1\n2515\n3130\n4/2/2017\n9/6/2008\nPrivate room\n1.0\n1.0\n59\n150\n9.0\n9.0\n9.0\nf\n\n\n1\n2\n2595\n3127\n4/2/2017\n9/9/2008\nEntire home/apt\n1.0\n0.0\n230\n20\n9.0\n10.0\n9.0\nf\n\n\n2\n3\n3647\n3050\n4/2/2017\n11/25/2008\nPrivate room\n1.0\n1.0\n150\n0\nNaN\nNaN\nNaN\nf\n\n\n3\n4\n3831\n3038\n4/2/2017\n12/7/2008\nEntire home/apt\n1.0\n1.0\n89\n116\n9.0\n9.0\n9.0\nf\n\n\n4\n5\n4611\n3012\n4/2/2017\n1/2/2009\nPrivate room\nNaN\n1.0\n39\n93\n9.0\n8.0\n9.0\nt\n\n\n\n\n\n\n\n\n# Check missing values\ndf.isnull().sum().sort_values(ascending=False)\n\nreview_scores_value          10256\nreview_scores_location       10254\nreview_scores_cleanliness    10195\nbathrooms                      160\nbedrooms                        76\nhost_since                      35\nUnnamed: 0                       0\nid                               0\ndays                             0\nlast_scraped                     0\nroom_type                        0\nprice                            0\nnumber_of_reviews                0\ninstant_bookable                 0\ndtype: int64\n\n\n\nimport numpy as np\n\n# Convert dates\ndf['last_scraped'] = pd.to_datetime(df['last_scraped'], errors='coerce')\ndf['host_since'] = pd.to_datetime(df['host_since'], errors='coerce')\n\n# Compute 'days' active\ndf['days'] = (df['last_scraped'] - df['host_since']).dt.days\n\n# Convert 'instant_bookable' to binary\ndf['instant_bookable'] = df['instant_bookable'].map({'t': 1, 'f': 0})\n\n# Keep relevant columns\nrelevant_cols = [\n    'number_of_reviews', 'room_type', 'bathrooms', 'bedrooms',\n    'price', 'review_scores_cleanliness', 'review_scores_location',\n    'review_scores_value', 'instant_bookable', 'days'\n]\n\ndf_clean = df[relevant_cols].dropna()\n\n# Check cleaned data shape\ndf_clean.shape\n\n(30140, 10)\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Summary stats\ndisplay(df_clean.describe())\n\n# Plot number_of_reviews vs. numeric predictors\nnumeric_vars = [\n    'price', 'bathrooms', 'bedrooms', 'days',\n    'review_scores_cleanliness', 'review_scores_location',\n    'review_scores_value'\n]\n\nfor var in numeric_vars:\n    plt.figure(figsize=(10, 8))\n    sns.scatterplot(data=df_clean, x=var, y='number_of_reviews', alpha=0.5)\n    plt.title(f'Number of Reviews vs {var}')\n    plt.xlabel(var)\n    plt.ylabel('Number of Reviews')\n    plt.grid(True)\n    plt.show()\n\n\n\n\n\n\n\n\nnumber_of_reviews\nbathrooms\nbedrooms\nprice\nreview_scores_cleanliness\nreview_scores_location\nreview_scores_value\ninstant_bookable\ndays\n\n\n\n\ncount\n30140.000000\n30140.000000\n30140.000000\n30140.000000\n30140.000000\n30140.000000\n30140.000000\n30140.000000\n30140.000000\n\n\nmean\n21.168115\n1.122213\n1.151460\n140.211546\n9.201758\n9.415428\n9.334041\n0.196151\n1112.048275\n\n\nstd\n32.004711\n0.385031\n0.699039\n188.437967\n1.114472\n0.843181\n0.900595\n0.397091\n644.430782\n\n\nmin\n1.000000\n0.000000\n0.000000\n10.000000\n2.000000\n2.000000\n2.000000\n0.000000\n7.000000\n\n\n25%\n3.000000\n1.000000\n1.000000\n70.000000\n9.000000\n9.000000\n9.000000\n0.000000\n584.000000\n\n\n50%\n8.000000\n1.000000\n1.000000\n103.000000\n10.000000\n10.000000\n10.000000\n0.000000\n1040.000000\n\n\n75%\n26.000000\n1.000000\n1.000000\n169.000000\n10.000000\n10.000000\n10.000000\n0.000000\n1591.000000\n\n\nmax\n421.000000\n6.000000\n10.000000\n10000.000000\n10.000000\n10.000000\n10.000000\n1.000000\n3317.000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\n\n# Load dataset\ndf = pd.read_csv(\"airbnb.csv\")\n\n# Convert date columns and calculate 'days' (not used in this model)\ndf['last_scraped'] = pd.to_datetime(df['last_scraped'], errors='coerce')\ndf['host_since'] = pd.to_datetime(df['host_since'], errors='coerce')\ndf['days'] = (df['last_scraped'] - df['host_since']).dt.days\n\n# Convert 'instant_bookable' to binary\ndf['instant_bookable'] = df['instant_bookable'].map({'t': 1, 'f': 0})\n\n# Select relevant columns and drop missing values\nairbnb_clean = df[[\n    'number_of_reviews', 'room_type', 'bathrooms', 'bedrooms', 'price',\n    'review_scores_cleanliness', 'review_scores_location',\n    'review_scores_value', 'instant_bookable'\n]].dropna()\n\n# Create dummy variables for 'room_type' (drop first to avoid multicollinearity)\nroom_dummies = pd.get_dummies(airbnb_clean['room_type'], drop_first=True)\n\n# Build design matrix X\nX = pd.concat([\n    airbnb_clean[['bathrooms', 'bedrooms', 'price',\n                  'review_scores_cleanliness', 'review_scores_location',\n                  'review_scores_value', 'instant_bookable']],\n    room_dummies\n], axis=1)\n\n# Convert any boolean columns to integers\nX = X.astype(float)\n\n# Add intercept\nX = sm.add_constant(X)\n\n# Define outcome variable\nY = airbnb_clean['number_of_reviews']\n\n# Fit Poisson regression model\npoisson_model = sm.GLM(Y, X, family=sm.families.Poisson())\npoisson_results = poisson_model.fit()\n\n# Display model summary\npoisson_results.summary()\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nnumber_of_reviews\nNo. Observations:\n30160\n\n\nModel:\nGLM\nDf Residuals:\n30150\n\n\nModel Family:\nPoisson\nDf Model:\n9\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-5.2900e+05\n\n\nDate:\nWed, 07 May 2025\nDeviance:\n9.3653e+05\n\n\nTime:\n20:47:20\nPearson chi2:\n1.41e+06\n\n\nNo. Iterations:\n6\nPseudo R-squ. (CS):\n0.5649\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n3.5725\n0.016\n223.215\n0.000\n3.541\n3.604\n\n\nbathrooms\n-0.1240\n0.004\n-33.091\n0.000\n-0.131\n-0.117\n\n\nbedrooms\n0.0749\n0.002\n37.698\n0.000\n0.071\n0.079\n\n\nprice\n-1.435e-05\n8.3e-06\n-1.729\n0.084\n-3.06e-05\n1.92e-06\n\n\nreview_scores_cleanliness\n0.1132\n0.001\n75.820\n0.000\n0.110\n0.116\n\n\nreview_scores_location\n-0.0768\n0.002\n-47.796\n0.000\n-0.080\n-0.074\n\n\nreview_scores_value\n-0.0915\n0.002\n-50.902\n0.000\n-0.095\n-0.088\n\n\ninstant_bookable\n0.3344\n0.003\n115.748\n0.000\n0.329\n0.340\n\n\nPrivate room\n-0.0145\n0.003\n-5.310\n0.000\n-0.020\n-0.009\n\n\nShared room\n-0.2519\n0.009\n-29.229\n0.000\n-0.269\n-0.235\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\n# Get exponentiated coefficients and confidence intervals\ncoef = poisson_results.params\nconf_int = poisson_results.conf_int()\nexp_coef = np.exp(coef)\nexp_conf_int = np.exp(conf_int)\n\n# Create summary DataFrame\neffects_df = pd.DataFrame({\n    \"Variable\": coef.index,\n    \"Exp(Coefficient)\": exp_coef.round(3),\n    \"95% CI Lower\": np.exp(conf_int[0]).round(3),\n    \"95% CI Upper\": np.exp(conf_int[1]).round(3),\n    \"Interpretation\": exp_coef.apply(lambda x: f\"{(x - 1) * 100:.1f}% change in expected reviews\")\n})\n\n# Display table\neffects_df.reset_index(drop=True, inplace=True)\neffects_df\n\n\n\n\n\n\n\n\nVariable\nExp(Coefficient)\n95% CI Lower\n95% CI Upper\nInterpretation\n\n\n\n\n0\nconst\n35.605\n34.505\n36.740\n3460.5% change in expected reviews\n\n\n1\nbathrooms\n0.883\n0.877\n0.890\n-11.7% change in expected reviews\n\n\n2\nbedrooms\n1.078\n1.074\n1.082\n7.8% change in expected reviews\n\n\n3\nprice\n1.000\n1.000\n1.000\n-0.0% change in expected reviews\n\n\n4\nreview_scores_cleanliness\n1.120\n1.117\n1.123\n12.0% change in expected reviews\n\n\n5\nreview_scores_location\n0.926\n0.923\n0.929\n-7.4% change in expected reviews\n\n\n6\nreview_scores_value\n0.913\n0.909\n0.916\n-8.7% change in expected reviews\n\n\n7\ninstant_bookable\n1.397\n1.389\n1.405\n39.7% change in expected reviews\n\n\n8\nPrivate room\n0.986\n0.980\n0.991\n-1.4% change in expected reviews\n\n\n9\nShared room\n0.777\n0.764\n0.791\n-22.3% change in expected reviews"
  }
]